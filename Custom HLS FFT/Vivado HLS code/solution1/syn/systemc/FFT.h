// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _FFT_HH_
#define _FFT_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "write_FFT_data_1200.h"
#include "fft_FFT_params_s.h"
#include "read_FFT_data_1201.h"
#include "fifo_w24_d2_A.h"
#include "fifo_w64_d1024_A.h"
#include "start_for_fft_FFT_params_U0.h"
#include "start_for_read_FFT_data_1201_U0.h"

namespace ap_rtl {

struct FFT : public sc_module {
    // Port declarations 13
    sc_in< sc_lv<64> > to_FFT_dout;
    sc_in< sc_logic > to_FFT_empty_n;
    sc_out< sc_logic > to_FFT_read;
    sc_out< sc_lv<64> > from_FFT_din;
    sc_in< sc_logic > from_FFT_full_n;
    sc_out< sc_logic > from_FFT_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<24> > ap_var_for_const1;


    // Module declarations
    FFT(sc_module_name name);
    SC_HAS_PROCESS(FFT);

    ~FFT();

    sc_trace_file* mVcdFile;

    write_FFT_data_1200* write_FFT_data_1200_U0;
    fft_FFT_params_s* fft_FFT_params_U0;
    read_FFT_data_1201* read_FFT_data_1201_U0;
    fifo_w24_d2_A* FFT_config_data_V_U;
    fifo_w64_d1024_A* x_in_channel_U;
    fifo_w64_d1024_A* x_out_channel_U;
    start_for_fft_FFT_params_U0* start_for_fft_FFT_params_U0_U;
    start_for_read_FFT_data_1201_U0* start_for_read_FFT_data_1201_U0_U;
    sc_signal< sc_logic > write_FFT_data_1200_U0_ap_start;
    sc_signal< sc_logic > write_FFT_data_1200_U0_start_full_n;
    sc_signal< sc_logic > write_FFT_data_1200_U0_ap_done;
    sc_signal< sc_logic > write_FFT_data_1200_U0_ap_continue;
    sc_signal< sc_logic > write_FFT_data_1200_U0_ap_idle;
    sc_signal< sc_logic > write_FFT_data_1200_U0_ap_ready;
    sc_signal< sc_logic > write_FFT_data_1200_U0_start_out;
    sc_signal< sc_logic > write_FFT_data_1200_U0_start_write;
    sc_signal< sc_logic > write_FFT_data_1200_U0_fft_config_data_V_read;
    sc_signal< sc_lv<24> > write_FFT_data_1200_U0_fft_config_data_V_din;
    sc_signal< sc_logic > write_FFT_data_1200_U0_fft_config_data_V_write;
    sc_signal< sc_lv<64> > write_FFT_data_1200_U0_to_FFT_2_din;
    sc_signal< sc_logic > write_FFT_data_1200_U0_to_FFT_2_write;
    sc_signal< sc_logic > write_FFT_data_1200_U0_to_FFT_read;
    sc_signal< sc_logic > fft_FFT_params_U0_ap_start;
    sc_signal< sc_logic > fft_FFT_params_U0_ap_done;
    sc_signal< sc_logic > fft_FFT_params_U0_ap_idle;
    sc_signal< sc_logic > fft_FFT_params_U0_ap_ready;
    sc_signal< sc_logic > fft_FFT_params_U0_ap_continue;
    sc_signal< sc_logic > fft_FFT_params_U0_xn_read;
    sc_signal< sc_lv<64> > fft_FFT_params_U0_xk_din;
    sc_signal< sc_logic > fft_FFT_params_U0_xk_write;
    sc_signal< sc_lv<8> > fft_FFT_params_U0_status_data_V_din;
    sc_signal< sc_logic > fft_FFT_params_U0_status_data_V_write;
    sc_signal< sc_logic > fft_FFT_params_U0_config_ch_data_V_read;
    sc_signal< sc_logic > read_FFT_data_1201_U0_ap_start;
    sc_signal< sc_logic > read_FFT_data_1201_U0_ap_done;
    sc_signal< sc_logic > read_FFT_data_1201_U0_ap_continue;
    sc_signal< sc_logic > read_FFT_data_1201_U0_ap_idle;
    sc_signal< sc_logic > read_FFT_data_1201_U0_ap_ready;
    sc_signal< sc_logic > read_FFT_data_1201_U0_from_FFT_2_read;
    sc_signal< sc_lv<64> > read_FFT_data_1201_U0_from_FFT_din;
    sc_signal< sc_logic > read_FFT_data_1201_U0_from_FFT_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > FFT_config_data_V_full_n;
    sc_signal< sc_lv<24> > FFT_config_data_V_dout;
    sc_signal< sc_logic > FFT_config_data_V_empty_n;
    sc_signal< sc_logic > fft_FFT_params_U0_config_ch_data_V_full_n;
    sc_signal< sc_logic > fft_FFT_params_U0_config_ch_data_V_write;
    sc_signal< sc_lv<24> > fft_FFT_params_U0_config_ch_data_V_din;
    sc_signal< sc_logic > x_in_channel_full_n;
    sc_signal< sc_lv<64> > x_in_channel_dout;
    sc_signal< sc_logic > x_in_channel_empty_n;
    sc_signal< sc_logic > x_out_channel_full_n;
    sc_signal< sc_lv<64> > x_out_channel_dout;
    sc_signal< sc_logic > x_out_channel_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_fft_FFT_params_U0_din;
    sc_signal< sc_logic > start_for_fft_FFT_params_U0_full_n;
    sc_signal< sc_lv<1> > start_for_fft_FFT_params_U0_dout;
    sc_signal< sc_logic > start_for_fft_FFT_params_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_read_FFT_data_1201_U0_din;
    sc_signal< sc_logic > start_for_read_FFT_data_1201_U0_full_n;
    sc_signal< sc_lv<1> > start_for_read_FFT_data_1201_U0_dout;
    sc_signal< sc_logic > start_for_read_FFT_data_1201_U0_empty_n;
    sc_signal< sc_logic > fft_FFT_params_U0_start_full_n;
    sc_signal< sc_logic > fft_FFT_params_U0_start_write;
    sc_signal< sc_logic > read_FFT_data_1201_U0_start_full_n;
    sc_signal< sc_logic > read_FFT_data_1201_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<24> ap_const_lv24_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_fft_FFT_params_U0_ap_continue();
    void thread_fft_FFT_params_U0_ap_start();
    void thread_fft_FFT_params_U0_config_ch_data_V_din();
    void thread_fft_FFT_params_U0_config_ch_data_V_full_n();
    void thread_fft_FFT_params_U0_config_ch_data_V_write();
    void thread_fft_FFT_params_U0_start_full_n();
    void thread_fft_FFT_params_U0_start_write();
    void thread_from_FFT_din();
    void thread_from_FFT_write();
    void thread_read_FFT_data_1201_U0_ap_continue();
    void thread_read_FFT_data_1201_U0_ap_start();
    void thread_read_FFT_data_1201_U0_start_full_n();
    void thread_read_FFT_data_1201_U0_start_write();
    void thread_start_for_fft_FFT_params_U0_din();
    void thread_start_for_read_FFT_data_1201_U0_din();
    void thread_to_FFT_read();
    void thread_write_FFT_data_1200_U0_ap_continue();
    void thread_write_FFT_data_1200_U0_ap_start();
    void thread_write_FFT_data_1200_U0_start_full_n();
};

}

using namespace ap_rtl;

#endif
