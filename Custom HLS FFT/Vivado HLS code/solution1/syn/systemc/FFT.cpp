// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "FFT.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic FFT::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<64> FFT::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_logic FFT::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<24> FFT::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<24> FFT::ap_const_lv24_1 = "1";

FFT::FFT(sc_module_name name) : sc_module(name), mVcdFile(0) {
    write_FFT_data_1200_U0 = new write_FFT_data_1200("write_FFT_data_1200_U0");
    write_FFT_data_1200_U0->ap_clk(ap_clk);
    write_FFT_data_1200_U0->ap_rst(ap_rst);
    write_FFT_data_1200_U0->ap_start(write_FFT_data_1200_U0_ap_start);
    write_FFT_data_1200_U0->start_full_n(write_FFT_data_1200_U0_start_full_n);
    write_FFT_data_1200_U0->ap_done(write_FFT_data_1200_U0_ap_done);
    write_FFT_data_1200_U0->ap_continue(write_FFT_data_1200_U0_ap_continue);
    write_FFT_data_1200_U0->ap_idle(write_FFT_data_1200_U0_ap_idle);
    write_FFT_data_1200_U0->ap_ready(write_FFT_data_1200_U0_ap_ready);
    write_FFT_data_1200_U0->start_out(write_FFT_data_1200_U0_start_out);
    write_FFT_data_1200_U0->start_write(write_FFT_data_1200_U0_start_write);
    write_FFT_data_1200_U0->fft_config_data_V_dout(FFT_config_data_V_dout);
    write_FFT_data_1200_U0->fft_config_data_V_empty_n(FFT_config_data_V_empty_n);
    write_FFT_data_1200_U0->fft_config_data_V_read(write_FFT_data_1200_U0_fft_config_data_V_read);
    write_FFT_data_1200_U0->fft_config_data_V_din(write_FFT_data_1200_U0_fft_config_data_V_din);
    write_FFT_data_1200_U0->fft_config_data_V_full_n(ap_var_for_const0);
    write_FFT_data_1200_U0->fft_config_data_V_write(write_FFT_data_1200_U0_fft_config_data_V_write);
    write_FFT_data_1200_U0->to_FFT_2_din(write_FFT_data_1200_U0_to_FFT_2_din);
    write_FFT_data_1200_U0->to_FFT_2_full_n(x_in_channel_full_n);
    write_FFT_data_1200_U0->to_FFT_2_write(write_FFT_data_1200_U0_to_FFT_2_write);
    write_FFT_data_1200_U0->to_FFT_dout(to_FFT_dout);
    write_FFT_data_1200_U0->to_FFT_empty_n(to_FFT_empty_n);
    write_FFT_data_1200_U0->to_FFT_read(write_FFT_data_1200_U0_to_FFT_read);
    fft_FFT_params_U0 = new fft_FFT_params_s("fft_FFT_params_U0");
    fft_FFT_params_U0->ap_clk(ap_clk);
    fft_FFT_params_U0->ap_rst(ap_rst);
    fft_FFT_params_U0->ap_start(fft_FFT_params_U0_ap_start);
    fft_FFT_params_U0->ap_ce(ap_var_for_const0);
    fft_FFT_params_U0->ap_done(fft_FFT_params_U0_ap_done);
    fft_FFT_params_U0->ap_idle(fft_FFT_params_U0_ap_idle);
    fft_FFT_params_U0->ap_ready(fft_FFT_params_U0_ap_ready);
    fft_FFT_params_U0->ap_continue(fft_FFT_params_U0_ap_continue);
    fft_FFT_params_U0->xn_dout(x_in_channel_dout);
    fft_FFT_params_U0->xn_empty_n(x_in_channel_empty_n);
    fft_FFT_params_U0->xn_read(fft_FFT_params_U0_xn_read);
    fft_FFT_params_U0->xk_din(fft_FFT_params_U0_xk_din);
    fft_FFT_params_U0->xk_full_n(x_out_channel_full_n);
    fft_FFT_params_U0->xk_write(fft_FFT_params_U0_xk_write);
    fft_FFT_params_U0->status_data_V_din(fft_FFT_params_U0_status_data_V_din);
    fft_FFT_params_U0->status_data_V_full_n(ap_var_for_const0);
    fft_FFT_params_U0->status_data_V_write(fft_FFT_params_U0_status_data_V_write);
    fft_FFT_params_U0->config_ch_data_V_dout(ap_var_for_const1);
    fft_FFT_params_U0->config_ch_data_V_empty_n(ap_var_for_const0);
    fft_FFT_params_U0->config_ch_data_V_read(fft_FFT_params_U0_config_ch_data_V_read);
    read_FFT_data_1201_U0 = new read_FFT_data_1201("read_FFT_data_1201_U0");
    read_FFT_data_1201_U0->ap_clk(ap_clk);
    read_FFT_data_1201_U0->ap_rst(ap_rst);
    read_FFT_data_1201_U0->ap_start(read_FFT_data_1201_U0_ap_start);
    read_FFT_data_1201_U0->ap_done(read_FFT_data_1201_U0_ap_done);
    read_FFT_data_1201_U0->ap_continue(read_FFT_data_1201_U0_ap_continue);
    read_FFT_data_1201_U0->ap_idle(read_FFT_data_1201_U0_ap_idle);
    read_FFT_data_1201_U0->ap_ready(read_FFT_data_1201_U0_ap_ready);
    read_FFT_data_1201_U0->from_FFT_2_dout(x_out_channel_dout);
    read_FFT_data_1201_U0->from_FFT_2_empty_n(x_out_channel_empty_n);
    read_FFT_data_1201_U0->from_FFT_2_read(read_FFT_data_1201_U0_from_FFT_2_read);
    read_FFT_data_1201_U0->from_FFT_din(read_FFT_data_1201_U0_from_FFT_din);
    read_FFT_data_1201_U0->from_FFT_full_n(from_FFT_full_n);
    read_FFT_data_1201_U0->from_FFT_write(read_FFT_data_1201_U0_from_FFT_write);
    FFT_config_data_V_U = new fifo_w24_d2_A("FFT_config_data_V_U");
    FFT_config_data_V_U->clk(ap_clk);
    FFT_config_data_V_U->reset(ap_rst);
    FFT_config_data_V_U->if_read_ce(ap_var_for_const0);
    FFT_config_data_V_U->if_write_ce(ap_var_for_const0);
    FFT_config_data_V_U->if_din(fft_FFT_params_U0_config_ch_data_V_din);
    FFT_config_data_V_U->if_full_n(FFT_config_data_V_full_n);
    FFT_config_data_V_U->if_write(fft_FFT_params_U0_config_ch_data_V_write);
    FFT_config_data_V_U->if_dout(FFT_config_data_V_dout);
    FFT_config_data_V_U->if_empty_n(FFT_config_data_V_empty_n);
    FFT_config_data_V_U->if_read(write_FFT_data_1200_U0_fft_config_data_V_read);
    x_in_channel_U = new fifo_w64_d1024_A("x_in_channel_U");
    x_in_channel_U->clk(ap_clk);
    x_in_channel_U->reset(ap_rst);
    x_in_channel_U->if_read_ce(ap_var_for_const0);
    x_in_channel_U->if_write_ce(ap_var_for_const0);
    x_in_channel_U->if_din(write_FFT_data_1200_U0_to_FFT_2_din);
    x_in_channel_U->if_full_n(x_in_channel_full_n);
    x_in_channel_U->if_write(write_FFT_data_1200_U0_to_FFT_2_write);
    x_in_channel_U->if_dout(x_in_channel_dout);
    x_in_channel_U->if_empty_n(x_in_channel_empty_n);
    x_in_channel_U->if_read(fft_FFT_params_U0_xn_read);
    x_out_channel_U = new fifo_w64_d1024_A("x_out_channel_U");
    x_out_channel_U->clk(ap_clk);
    x_out_channel_U->reset(ap_rst);
    x_out_channel_U->if_read_ce(ap_var_for_const0);
    x_out_channel_U->if_write_ce(ap_var_for_const0);
    x_out_channel_U->if_din(fft_FFT_params_U0_xk_din);
    x_out_channel_U->if_full_n(x_out_channel_full_n);
    x_out_channel_U->if_write(fft_FFT_params_U0_xk_write);
    x_out_channel_U->if_dout(x_out_channel_dout);
    x_out_channel_U->if_empty_n(x_out_channel_empty_n);
    x_out_channel_U->if_read(read_FFT_data_1201_U0_from_FFT_2_read);
    start_for_fft_FFT_params_U0_U = new start_for_fft_FFT_params_U0("start_for_fft_FFT_params_U0_U");
    start_for_fft_FFT_params_U0_U->clk(ap_clk);
    start_for_fft_FFT_params_U0_U->reset(ap_rst);
    start_for_fft_FFT_params_U0_U->if_read_ce(ap_var_for_const0);
    start_for_fft_FFT_params_U0_U->if_write_ce(ap_var_for_const0);
    start_for_fft_FFT_params_U0_U->if_din(start_for_fft_FFT_params_U0_din);
    start_for_fft_FFT_params_U0_U->if_full_n(start_for_fft_FFT_params_U0_full_n);
    start_for_fft_FFT_params_U0_U->if_write(write_FFT_data_1200_U0_start_write);
    start_for_fft_FFT_params_U0_U->if_dout(start_for_fft_FFT_params_U0_dout);
    start_for_fft_FFT_params_U0_U->if_empty_n(start_for_fft_FFT_params_U0_empty_n);
    start_for_fft_FFT_params_U0_U->if_read(fft_FFT_params_U0_ap_ready);
    start_for_read_FFT_data_1201_U0_U = new start_for_read_FFT_data_1201_U0("start_for_read_FFT_data_1201_U0_U");
    start_for_read_FFT_data_1201_U0_U->clk(ap_clk);
    start_for_read_FFT_data_1201_U0_U->reset(ap_rst);
    start_for_read_FFT_data_1201_U0_U->if_read_ce(ap_var_for_const0);
    start_for_read_FFT_data_1201_U0_U->if_write_ce(ap_var_for_const0);
    start_for_read_FFT_data_1201_U0_U->if_din(start_for_read_FFT_data_1201_U0_din);
    start_for_read_FFT_data_1201_U0_U->if_full_n(start_for_read_FFT_data_1201_U0_full_n);
    start_for_read_FFT_data_1201_U0_U->if_write(write_FFT_data_1200_U0_start_write);
    start_for_read_FFT_data_1201_U0_U->if_dout(start_for_read_FFT_data_1201_U0_dout);
    start_for_read_FFT_data_1201_U0_U->if_empty_n(start_for_read_FFT_data_1201_U0_empty_n);
    start_for_read_FFT_data_1201_U0_U->if_read(read_FFT_data_1201_U0_ap_ready);

    SC_METHOD(thread_ap_done);
    sensitive << ( read_FFT_data_1201_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( write_FFT_data_1200_U0_ap_idle );
    sensitive << ( fft_FFT_params_U0_ap_idle );
    sensitive << ( read_FFT_data_1201_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( write_FFT_data_1200_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( read_FFT_data_1201_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( write_FFT_data_1200_U0_ap_ready );

    SC_METHOD(thread_fft_FFT_params_U0_ap_continue);

    SC_METHOD(thread_fft_FFT_params_U0_ap_start);
    sensitive << ( start_for_fft_FFT_params_U0_empty_n );

    SC_METHOD(thread_fft_FFT_params_U0_config_ch_data_V_din);

    SC_METHOD(thread_fft_FFT_params_U0_config_ch_data_V_full_n);
    sensitive << ( FFT_config_data_V_full_n );

    SC_METHOD(thread_fft_FFT_params_U0_config_ch_data_V_write);

    SC_METHOD(thread_fft_FFT_params_U0_start_full_n);

    SC_METHOD(thread_fft_FFT_params_U0_start_write);

    SC_METHOD(thread_from_FFT_din);
    sensitive << ( read_FFT_data_1201_U0_from_FFT_din );

    SC_METHOD(thread_from_FFT_write);
    sensitive << ( read_FFT_data_1201_U0_from_FFT_write );

    SC_METHOD(thread_read_FFT_data_1201_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_read_FFT_data_1201_U0_ap_start);
    sensitive << ( start_for_read_FFT_data_1201_U0_empty_n );

    SC_METHOD(thread_read_FFT_data_1201_U0_start_full_n);

    SC_METHOD(thread_read_FFT_data_1201_U0_start_write);

    SC_METHOD(thread_start_for_fft_FFT_params_U0_din);

    SC_METHOD(thread_start_for_read_FFT_data_1201_U0_din);

    SC_METHOD(thread_to_FFT_read);
    sensitive << ( write_FFT_data_1200_U0_to_FFT_read );

    SC_METHOD(thread_write_FFT_data_1200_U0_ap_continue);

    SC_METHOD(thread_write_FFT_data_1200_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_write_FFT_data_1200_U0_start_full_n);
    sensitive << ( start_for_fft_FFT_params_U0_full_n );
    sensitive << ( start_for_read_FFT_data_1201_U0_full_n );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "FFT_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, to_FFT_dout, "(port)to_FFT_dout");
    sc_trace(mVcdFile, to_FFT_empty_n, "(port)to_FFT_empty_n");
    sc_trace(mVcdFile, to_FFT_read, "(port)to_FFT_read");
    sc_trace(mVcdFile, from_FFT_din, "(port)from_FFT_din");
    sc_trace(mVcdFile, from_FFT_full_n, "(port)from_FFT_full_n");
    sc_trace(mVcdFile, from_FFT_write, "(port)from_FFT_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, write_FFT_data_1200_U0_ap_start, "write_FFT_data_1200_U0_ap_start");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_start_full_n, "write_FFT_data_1200_U0_start_full_n");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_ap_done, "write_FFT_data_1200_U0_ap_done");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_ap_continue, "write_FFT_data_1200_U0_ap_continue");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_ap_idle, "write_FFT_data_1200_U0_ap_idle");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_ap_ready, "write_FFT_data_1200_U0_ap_ready");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_start_out, "write_FFT_data_1200_U0_start_out");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_start_write, "write_FFT_data_1200_U0_start_write");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_fft_config_data_V_read, "write_FFT_data_1200_U0_fft_config_data_V_read");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_fft_config_data_V_din, "write_FFT_data_1200_U0_fft_config_data_V_din");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_fft_config_data_V_write, "write_FFT_data_1200_U0_fft_config_data_V_write");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_to_FFT_2_din, "write_FFT_data_1200_U0_to_FFT_2_din");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_to_FFT_2_write, "write_FFT_data_1200_U0_to_FFT_2_write");
    sc_trace(mVcdFile, write_FFT_data_1200_U0_to_FFT_read, "write_FFT_data_1200_U0_to_FFT_read");
    sc_trace(mVcdFile, fft_FFT_params_U0_ap_start, "fft_FFT_params_U0_ap_start");
    sc_trace(mVcdFile, fft_FFT_params_U0_ap_done, "fft_FFT_params_U0_ap_done");
    sc_trace(mVcdFile, fft_FFT_params_U0_ap_idle, "fft_FFT_params_U0_ap_idle");
    sc_trace(mVcdFile, fft_FFT_params_U0_ap_ready, "fft_FFT_params_U0_ap_ready");
    sc_trace(mVcdFile, fft_FFT_params_U0_ap_continue, "fft_FFT_params_U0_ap_continue");
    sc_trace(mVcdFile, fft_FFT_params_U0_xn_read, "fft_FFT_params_U0_xn_read");
    sc_trace(mVcdFile, fft_FFT_params_U0_xk_din, "fft_FFT_params_U0_xk_din");
    sc_trace(mVcdFile, fft_FFT_params_U0_xk_write, "fft_FFT_params_U0_xk_write");
    sc_trace(mVcdFile, fft_FFT_params_U0_status_data_V_din, "fft_FFT_params_U0_status_data_V_din");
    sc_trace(mVcdFile, fft_FFT_params_U0_status_data_V_write, "fft_FFT_params_U0_status_data_V_write");
    sc_trace(mVcdFile, fft_FFT_params_U0_config_ch_data_V_read, "fft_FFT_params_U0_config_ch_data_V_read");
    sc_trace(mVcdFile, read_FFT_data_1201_U0_ap_start, "read_FFT_data_1201_U0_ap_start");
    sc_trace(mVcdFile, read_FFT_data_1201_U0_ap_done, "read_FFT_data_1201_U0_ap_done");
    sc_trace(mVcdFile, read_FFT_data_1201_U0_ap_continue, "read_FFT_data_1201_U0_ap_continue");
    sc_trace(mVcdFile, read_FFT_data_1201_U0_ap_idle, "read_FFT_data_1201_U0_ap_idle");
    sc_trace(mVcdFile, read_FFT_data_1201_U0_ap_ready, "read_FFT_data_1201_U0_ap_ready");
    sc_trace(mVcdFile, read_FFT_data_1201_U0_from_FFT_2_read, "read_FFT_data_1201_U0_from_FFT_2_read");
    sc_trace(mVcdFile, read_FFT_data_1201_U0_from_FFT_din, "read_FFT_data_1201_U0_from_FFT_din");
    sc_trace(mVcdFile, read_FFT_data_1201_U0_from_FFT_write, "read_FFT_data_1201_U0_from_FFT_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, FFT_config_data_V_full_n, "FFT_config_data_V_full_n");
    sc_trace(mVcdFile, FFT_config_data_V_dout, "FFT_config_data_V_dout");
    sc_trace(mVcdFile, FFT_config_data_V_empty_n, "FFT_config_data_V_empty_n");
    sc_trace(mVcdFile, fft_FFT_params_U0_config_ch_data_V_full_n, "fft_FFT_params_U0_config_ch_data_V_full_n");
    sc_trace(mVcdFile, fft_FFT_params_U0_config_ch_data_V_write, "fft_FFT_params_U0_config_ch_data_V_write");
    sc_trace(mVcdFile, fft_FFT_params_U0_config_ch_data_V_din, "fft_FFT_params_U0_config_ch_data_V_din");
    sc_trace(mVcdFile, x_in_channel_full_n, "x_in_channel_full_n");
    sc_trace(mVcdFile, x_in_channel_dout, "x_in_channel_dout");
    sc_trace(mVcdFile, x_in_channel_empty_n, "x_in_channel_empty_n");
    sc_trace(mVcdFile, x_out_channel_full_n, "x_out_channel_full_n");
    sc_trace(mVcdFile, x_out_channel_dout, "x_out_channel_dout");
    sc_trace(mVcdFile, x_out_channel_empty_n, "x_out_channel_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_fft_FFT_params_U0_din, "start_for_fft_FFT_params_U0_din");
    sc_trace(mVcdFile, start_for_fft_FFT_params_U0_full_n, "start_for_fft_FFT_params_U0_full_n");
    sc_trace(mVcdFile, start_for_fft_FFT_params_U0_dout, "start_for_fft_FFT_params_U0_dout");
    sc_trace(mVcdFile, start_for_fft_FFT_params_U0_empty_n, "start_for_fft_FFT_params_U0_empty_n");
    sc_trace(mVcdFile, start_for_read_FFT_data_1201_U0_din, "start_for_read_FFT_data_1201_U0_din");
    sc_trace(mVcdFile, start_for_read_FFT_data_1201_U0_full_n, "start_for_read_FFT_data_1201_U0_full_n");
    sc_trace(mVcdFile, start_for_read_FFT_data_1201_U0_dout, "start_for_read_FFT_data_1201_U0_dout");
    sc_trace(mVcdFile, start_for_read_FFT_data_1201_U0_empty_n, "start_for_read_FFT_data_1201_U0_empty_n");
    sc_trace(mVcdFile, fft_FFT_params_U0_start_full_n, "fft_FFT_params_U0_start_full_n");
    sc_trace(mVcdFile, fft_FFT_params_U0_start_write, "fft_FFT_params_U0_start_write");
    sc_trace(mVcdFile, read_FFT_data_1201_U0_start_full_n, "read_FFT_data_1201_U0_start_full_n");
    sc_trace(mVcdFile, read_FFT_data_1201_U0_start_write, "read_FFT_data_1201_U0_start_write");
#endif

    }
}

FFT::~FFT() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete write_FFT_data_1200_U0;
    delete fft_FFT_params_U0;
    delete read_FFT_data_1201_U0;
    delete FFT_config_data_V_U;
    delete x_in_channel_U;
    delete x_out_channel_U;
    delete start_for_fft_FFT_params_U0_U;
    delete start_for_read_FFT_data_1201_U0_U;
}

void FFT::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void FFT::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv24_0;
}

void FFT::thread_ap_done() {
    ap_done = read_FFT_data_1201_U0_ap_done.read();
}

void FFT::thread_ap_idle() {
    ap_idle = (write_FFT_data_1200_U0_ap_idle.read() & fft_FFT_params_U0_ap_idle.read() & read_FFT_data_1201_U0_ap_idle.read());
}

void FFT::thread_ap_ready() {
    ap_ready = write_FFT_data_1200_U0_ap_ready.read();
}

void FFT::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void FFT::thread_ap_sync_done() {
    ap_sync_done = read_FFT_data_1201_U0_ap_done.read();
}

void FFT::thread_ap_sync_ready() {
    ap_sync_ready = write_FFT_data_1200_U0_ap_ready.read();
}

void FFT::thread_fft_FFT_params_U0_ap_continue() {
    fft_FFT_params_U0_ap_continue = ap_const_logic_1;
}

void FFT::thread_fft_FFT_params_U0_ap_start() {
    fft_FFT_params_U0_ap_start = start_for_fft_FFT_params_U0_empty_n.read();
}

void FFT::thread_fft_FFT_params_U0_config_ch_data_V_din() {
    fft_FFT_params_U0_config_ch_data_V_din = ap_const_lv24_0;
}

void FFT::thread_fft_FFT_params_U0_config_ch_data_V_full_n() {
    fft_FFT_params_U0_config_ch_data_V_full_n = FFT_config_data_V_full_n.read();
}

void FFT::thread_fft_FFT_params_U0_config_ch_data_V_write() {
    fft_FFT_params_U0_config_ch_data_V_write = ap_const_logic_0;
}

void FFT::thread_fft_FFT_params_U0_start_full_n() {
    fft_FFT_params_U0_start_full_n = ap_const_logic_1;
}

void FFT::thread_fft_FFT_params_U0_start_write() {
    fft_FFT_params_U0_start_write = ap_const_logic_0;
}

void FFT::thread_from_FFT_din() {
    from_FFT_din = read_FFT_data_1201_U0_from_FFT_din.read();
}

void FFT::thread_from_FFT_write() {
    from_FFT_write = read_FFT_data_1201_U0_from_FFT_write.read();
}

void FFT::thread_read_FFT_data_1201_U0_ap_continue() {
    read_FFT_data_1201_U0_ap_continue = ap_continue.read();
}

void FFT::thread_read_FFT_data_1201_U0_ap_start() {
    read_FFT_data_1201_U0_ap_start = start_for_read_FFT_data_1201_U0_empty_n.read();
}

void FFT::thread_read_FFT_data_1201_U0_start_full_n() {
    read_FFT_data_1201_U0_start_full_n = ap_const_logic_1;
}

void FFT::thread_read_FFT_data_1201_U0_start_write() {
    read_FFT_data_1201_U0_start_write = ap_const_logic_0;
}

void FFT::thread_start_for_fft_FFT_params_U0_din() {
    start_for_fft_FFT_params_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void FFT::thread_start_for_read_FFT_data_1201_U0_din() {
    start_for_read_FFT_data_1201_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void FFT::thread_to_FFT_read() {
    to_FFT_read = write_FFT_data_1200_U0_to_FFT_read.read();
}

void FFT::thread_write_FFT_data_1200_U0_ap_continue() {
    write_FFT_data_1200_U0_ap_continue = ap_const_logic_1;
}

void FFT::thread_write_FFT_data_1200_U0_ap_start() {
    write_FFT_data_1200_U0_ap_start = ap_start.read();
}

void FFT::thread_write_FFT_data_1200_U0_start_full_n() {
    write_FFT_data_1200_U0_start_full_n = (start_for_fft_FFT_params_U0_full_n.read() & start_for_read_FFT_data_1201_U0_full_n.read());
}

}

