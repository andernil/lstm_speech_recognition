// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "read_FFT_data_1201.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic read_FFT_data_1201::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic read_FFT_data_1201::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> read_FFT_data_1201::ap_ST_fsm_state1 = "1";
const sc_lv<2> read_FFT_data_1201::ap_ST_fsm_state2 = "10";
const sc_lv<32> read_FFT_data_1201::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> read_FFT_data_1201::ap_const_lv32_1 = "1";
const sc_lv<1> read_FFT_data_1201::ap_const_lv1_0 = "0";
const sc_lv<11> read_FFT_data_1201::ap_const_lv11_0 = "00000000000";
const sc_lv<11> read_FFT_data_1201::ap_const_lv11_400 = "10000000000";
const sc_lv<11> read_FFT_data_1201::ap_const_lv11_1 = "1";
const sc_lv<1> read_FFT_data_1201::ap_const_lv1_1 = "1";
const bool read_FFT_data_1201::ap_const_boolean_1 = true;

read_FFT_data_1201::read_FFT_data_1201(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( from_FFT_2_empty_n );
    sensitive << ( from_FFT_full_n );
    sensitive << ( exitcond_fu_59_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( from_FFT_2_empty_n );
    sensitive << ( from_FFT_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_59_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( from_FFT_2_empty_n );
    sensitive << ( from_FFT_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_59_p2 );

    SC_METHOD(thread_exitcond_fu_59_p2);
    sensitive << ( from_FFT_2_empty_n );
    sensitive << ( from_FFT_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_59_p2 );
    sensitive << ( i_reg_48 );

    SC_METHOD(thread_from_FFT_2_blk_n);
    sensitive << ( from_FFT_2_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_59_p2 );

    SC_METHOD(thread_from_FFT_2_read);
    sensitive << ( from_FFT_2_empty_n );
    sensitive << ( from_FFT_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_59_p2 );

    SC_METHOD(thread_from_FFT_blk_n);
    sensitive << ( from_FFT_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_59_p2 );

    SC_METHOD(thread_from_FFT_din);
    sensitive << ( from_FFT_2_dout );
    sensitive << ( from_FFT_2_empty_n );
    sensitive << ( from_FFT_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_59_p2 );

    SC_METHOD(thread_from_FFT_write);
    sensitive << ( from_FFT_2_empty_n );
    sensitive << ( from_FFT_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_59_p2 );

    SC_METHOD(thread_i_8_fu_65_p2);
    sensitive << ( i_reg_48 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( from_FFT_2_empty_n );
    sensitive << ( from_FFT_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_59_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "read_FFT_data_1201_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, from_FFT_2_dout, "(port)from_FFT_2_dout");
    sc_trace(mVcdFile, from_FFT_2_empty_n, "(port)from_FFT_2_empty_n");
    sc_trace(mVcdFile, from_FFT_2_read, "(port)from_FFT_2_read");
    sc_trace(mVcdFile, from_FFT_din, "(port)from_FFT_din");
    sc_trace(mVcdFile, from_FFT_full_n, "(port)from_FFT_full_n");
    sc_trace(mVcdFile, from_FFT_write, "(port)from_FFT_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, from_FFT_2_blk_n, "from_FFT_2_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_59_p2, "exitcond_fu_59_p2");
    sc_trace(mVcdFile, from_FFT_blk_n, "from_FFT_blk_n");
    sc_trace(mVcdFile, i_8_fu_65_p2, "i_8_fu_65_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, i_reg_48, "i_reg_48");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

read_FFT_data_1201::~read_FFT_data_1201() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void read_FFT_data_1201::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !((esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_2_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_full_n.read()))) && 
                    esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_2_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_full_n.read()))))) {
        i_reg_48 = i_8_fu_65_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_reg_48 = ap_const_lv11_0;
    }
}

void read_FFT_data_1201::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void read_FFT_data_1201::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void read_FFT_data_1201::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void read_FFT_data_1201::thread_ap_block_state2() {
    ap_block_state2 = ((esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_2_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_full_n.read())));
}

void read_FFT_data_1201::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !((esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_2_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_full_n.read()))) && 
         esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void read_FFT_data_1201::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void read_FFT_data_1201::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !((esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_2_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_full_n.read()))) && 
         esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void read_FFT_data_1201::thread_exitcond_fu_59_p2() {
    exitcond_fu_59_p2 = (!i_reg_48.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_48.read() == ap_const_lv11_400);
}

void read_FFT_data_1201::thread_from_FFT_2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0))) {
        from_FFT_2_blk_n = from_FFT_2_empty_n.read();
    } else {
        from_FFT_2_blk_n = ap_const_logic_1;
    }
}

void read_FFT_data_1201::thread_from_FFT_2_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_2_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_full_n.read()))))) {
        from_FFT_2_read = ap_const_logic_1;
    } else {
        from_FFT_2_read = ap_const_logic_0;
    }
}

void read_FFT_data_1201::thread_from_FFT_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0))) {
        from_FFT_blk_n = from_FFT_full_n.read();
    } else {
        from_FFT_blk_n = ap_const_logic_1;
    }
}

void read_FFT_data_1201::thread_from_FFT_din() {
    from_FFT_din = from_FFT_2_dout.read();
}

void read_FFT_data_1201::thread_from_FFT_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_2_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_full_n.read()))))) {
        from_FFT_write = ap_const_logic_1;
    } else {
        from_FFT_write = ap_const_logic_0;
    }
}

void read_FFT_data_1201::thread_i_8_fu_65_p2() {
    i_8_fu_65_p2 = (!i_reg_48.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_reg_48.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void read_FFT_data_1201::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_2_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_full_n.read()))) && esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && !((esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_2_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_FFT_full_n.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

