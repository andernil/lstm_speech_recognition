-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scaled_fixed2ieee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (62 downto 0);
    prescale : IN STD_LOGIC_VECTOR (11 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of scaled_fixed2ieee is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv12_3FF : STD_LOGIC_VECTOR (11 downto 0) := "001111111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_5_fu_247_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_5_reg_613 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_bits_V_addr_1_reg_618 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond6_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_409_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_626 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_62_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_reg_631 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_7_fu_447_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_645 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_2_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal r_V_36_fu_503_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal out_bits_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_bits_V_ce0 : STD_LOGIC;
    signal out_bits_V_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_bits_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_165 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_reg_177 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_s_reg_188 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_67_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_reg_210 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_Val2_9_in_phi_fu_224_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_9_in_reg_221 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_phi_mux_shift_1_phi_fu_234_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_1_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_fu_261_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_390_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_fu_258_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_270_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal Lo_assign_fu_284_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal Hi_assign_fu_278_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_84_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_305_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_88_fu_317_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_85_fu_296_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_87_fu_311_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_89_fu_323_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_91_fu_338_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_92_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_90_fu_331_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_93_fu_352_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_94_fu_356_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_95_fu_360_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_96_fu_366_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_372_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_98_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_fu_382_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_39_fu_420_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal isNeg_fu_465_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ush_fu_479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_487_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_491_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_8_fu_497_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_68_fu_518_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_82_cast_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp1_fu_556_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_102_fu_552_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_exp_V_fu_574_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal significand_V_fu_566_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_40_fu_582_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_write_assign_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component scaled_fixed2ieee_out_bits_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scaled_fixed2ieee_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    out_bits_V_U : component scaled_fixed2ieee_out_bits_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_bits_V_address0,
        ce0 => out_bits_V_ce0,
        we0 => out_bits_V_we0,
        d0 => out_bits_V_d0,
        q0 => out_bits_V_q0);

    c_U : component scaled_fixed2ieee_c
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => c_d0,
        q0 => c_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(3) <= '0';
                ap_return_preg(4) <= '0';
                ap_return_preg(5) <= '0';
                ap_return_preg(6) <= '0';
                ap_return_preg(7) <= '0';
                ap_return_preg(8) <= '0';
                ap_return_preg(9) <= '0';
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(26) <= '0';
                ap_return_preg(27) <= '0';
                ap_return_preg(28) <= '0';
                ap_return_preg(29) <= '0';
                ap_return_preg(30) <= '0';
                ap_return_preg(31) <= '0';
                ap_return_preg(32) <= '0';
                ap_return_preg(33) <= '0';
                ap_return_preg(34) <= '0';
                ap_return_preg(35) <= '0';
                ap_return_preg(36) <= '0';
                ap_return_preg(37) <= '0';
                ap_return_preg(38) <= '0';
                ap_return_preg(39) <= '0';
                ap_return_preg(40) <= '0';
                ap_return_preg(41) <= '0';
                ap_return_preg(42) <= '0';
                ap_return_preg(43) <= '0';
                ap_return_preg(44) <= '0';
                ap_return_preg(45) <= '0';
                ap_return_preg(46) <= '0';
                ap_return_preg(47) <= '0';
                ap_return_preg(48) <= '0';
                ap_return_preg(49) <= '0';
                ap_return_preg(50) <= '0';
                ap_return_preg(51) <= '0';
                ap_return_preg(52) <= '0';
                ap_return_preg(53) <= '0';
                ap_return_preg(54) <= '0';
                ap_return_preg(55) <= '0';
                ap_return_preg(56) <= '0';
                ap_return_preg(57) <= '0';
                ap_return_preg(58) <= '0';
                ap_return_preg(59) <= '0';
                ap_return_preg(60) <= '0';
                ap_return_preg(61) <= '0';
                ap_return_preg(62) <= '0';
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((tmp_99_reg_641 = ap_const_lv1_1) or (tmp_67_fu_512_p2 = ap_const_lv1_0)))) then 
                                        ap_return_preg(62 downto 0) <= result_write_assign_fu_592_p1(62 downto 0);
                end if; 
            end if;
        end if;
    end process;


    i1_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_reg_177 <= i_6_reg_626;
            elsif (((exitcond6_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_177 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i2_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_reg_210 <= ap_const_lv3_0;
            elsif (((tmp_99_reg_641 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_67_fu_512_p2 = ap_const_lv1_1))) then 
                i2_reg_210 <= i_7_reg_645;
            end if; 
        end if;
    end process;

    i_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_165 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_165 <= i_5_reg_613;
            end if; 
        end if;
    end process;

    p_Val2_9_in_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_99_reg_641 = ap_const_lv1_0) and (tmp_67_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_Val2_9_in_reg_221 <= r_V_36_fu_503_p3;
            elsif (((tmp_99_fu_439_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_Val2_9_in_reg_221 <= p_s_reg_188;
            end if; 
        end if;
    end process;

    p_s_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_s_reg_188 <= in_V;
            elsif (((tmp_99_reg_641 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_67_fu_512_p2 = ap_const_lv1_1))) then 
                p_s_reg_188 <= r_V_36_fu_503_p3;
            end if; 
        end if;
    end process;

    shift_1_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_99_reg_641 = ap_const_lv1_0) and (tmp_67_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                shift_1_reg_231 <= shift_2_fu_458_p2;
            elsif (((tmp_99_fu_439_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                shift_1_reg_231 <= shift_reg_198;
            end if; 
        end if;
    end process;

    shift_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                shift_reg_198 <= ap_const_lv32_0;
            elsif (((tmp_99_reg_641 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_67_fu_512_p2 = ap_const_lv1_1))) then 
                shift_reg_198 <= shift_2_fu_458_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_5_reg_613 <= i_5_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_6_reg_626 <= i_6_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_7_reg_645 <= i_7_fu_447_p2;
                tmp_99_reg_641 <= i2_reg_210(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                out_bits_V_addr_1_reg_618 <= tmp_fu_253_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_62_reg_631(2 downto 0) <= tmp_62_fu_415_p1(2 downto 0);
            end if;
        end if;
    end process;
    tmp_62_reg_631(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    ap_return_preg(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond6_fu_241_p2, ap_CS_fsm_state4, exitcond_fu_403_p2, tmp_99_reg_641, ap_CS_fsm_state7, tmp_67_fu_512_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond6_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((tmp_99_reg_641 = ap_const_lv1_1) or (tmp_67_fu_512_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    Hi_assign_fu_278_p2 <= std_logic_vector(signed(ap_const_lv6_3E) - signed(tmp_s_fu_270_p3));
    Lo_assign_fu_284_p2 <= std_logic_vector(signed(ap_const_lv6_2F) - signed(tmp_s_fu_270_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_99_reg_641, ap_CS_fsm_state7, tmp_67_fu_512_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and ((tmp_99_reg_641 = ap_const_lv1_1) or (tmp_67_fu_512_p2 = ap_const_lv1_0))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_9_in_phi_fu_224_p4_assign_proc : process(tmp_99_reg_641, ap_CS_fsm_state7, r_V_36_fu_503_p3, tmp_67_fu_512_p2, p_Val2_9_in_reg_221)
    begin
        if (((tmp_99_reg_641 = ap_const_lv1_0) and (tmp_67_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_phi_mux_p_Val2_9_in_phi_fu_224_p4 <= r_V_36_fu_503_p3;
        else 
            ap_phi_mux_p_Val2_9_in_phi_fu_224_p4 <= p_Val2_9_in_reg_221;
        end if; 
    end process;


    ap_phi_mux_shift_1_phi_fu_234_p4_assign_proc : process(tmp_99_reg_641, shift_2_fu_458_p2, ap_CS_fsm_state7, tmp_67_fu_512_p2, shift_1_reg_231)
    begin
        if (((tmp_99_reg_641 = ap_const_lv1_0) and (tmp_67_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_phi_mux_shift_1_phi_fu_234_p4 <= shift_2_fu_458_p2;
        else 
            ap_phi_mux_shift_1_phi_fu_234_p4 <= shift_1_reg_231;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_99_reg_641, ap_CS_fsm_state7, tmp_67_fu_512_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((tmp_99_reg_641 = ap_const_lv1_1) or (tmp_67_fu_512_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(tmp_99_reg_641, ap_CS_fsm_state7, tmp_67_fu_512_p2, result_write_assign_fu_592_p1, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((tmp_99_reg_641 = ap_const_lv1_1) or (tmp_67_fu_512_p2 = ap_const_lv1_0)))) then 
            ap_return <= result_write_assign_fu_592_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    c_address0_assign_proc : process(tmp_62_reg_631, ap_CS_fsm_state6, ap_CS_fsm_state5, tmp_64_fu_453_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_address0 <= tmp_64_fu_453_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address0 <= tmp_62_reg_631(2 - 1 downto 0);
        else 
            c_address0 <= "XX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    c_d0_proc : process(p_Result_39_fu_420_p4)
    begin
        c_d0 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_39_fu_420_p4(i) = '1' then
                c_d0 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;


    c_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond6_fu_241_p2 <= "1" when (i_reg_165 = ap_const_lv2_3) else "0";
    exitcond_fu_403_p2 <= "1" when (i1_reg_177 = ap_const_lv3_4) else "0";
    i_5_fu_247_p2 <= std_logic_vector(unsigned(i_reg_165) + unsigned(ap_const_lv2_1));
    i_6_fu_409_p2 <= std_logic_vector(unsigned(i1_reg_177) + unsigned(ap_const_lv3_1));
    i_7_fu_447_p2 <= std_logic_vector(unsigned(i2_reg_210) + unsigned(ap_const_lv3_1));
    isNeg_fu_465_p3 <= c_q0(31 downto 31);
    newexp_fu_527_p2 <= std_logic_vector(signed(tmp_82_cast_fu_523_p1) - signed(ap_phi_mux_shift_1_phi_fu_234_p4));
    or_cond_fu_546_p2 <= (tmp_69_fu_541_p2 or tmp_101_fu_533_p3);

    out_bits_V_address0_assign_proc : process(ap_CS_fsm_state2, out_bits_V_addr_1_reg_618, exitcond6_fu_241_p2, ap_CS_fsm_state4, tmp_62_fu_415_p1, ap_CS_fsm_state3, tmp_fu_253_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_bits_V_address0 <= tmp_62_fu_415_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_bits_V_address0 <= out_bits_V_addr_1_reg_618;
        elsif (((exitcond6_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_bits_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif (((exitcond6_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_bits_V_address0 <= tmp_fu_253_p1(2 - 1 downto 0);
        else 
            out_bits_V_address0 <= "XX";
        end if; 
    end process;


    out_bits_V_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond6_fu_241_p2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((exitcond6_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond6_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_bits_V_ce0 <= ap_const_logic_1;
        else 
            out_bits_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_bits_V_d0_assign_proc : process(ap_CS_fsm_state2, exitcond6_fu_241_p2, ap_CS_fsm_state3, tmp_83_fu_261_p3, p_Result_4_fu_390_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_bits_V_d0 <= p_Result_4_fu_390_p5;
        elsif (((exitcond6_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_bits_V_d0 <= tmp_83_fu_261_p3;
        else 
            out_bits_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_bits_V_we0_assign_proc : process(ap_CS_fsm_state2, exitcond6_fu_241_p2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_bits_V_we0 <= ap_const_lv4_F;
        elsif (((exitcond6_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_bits_V_we0 <= ap_const_lv4_C;
        else 
            out_bits_V_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    out_exp_V_fu_574_p3 <= 
        ap_const_lv11_0 when (or_cond_fu_546_p2(0) = '1') else 
        tmp_102_fu_552_p1;
    
    p_Result_39_fu_420_p4_proc : process(out_bits_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_39_fu_420_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := out_bits_V_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_39_fu_420_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_39_fu_420_p4_i) := out_bits_V_q0(32-1-p_Result_39_fu_420_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_39_fu_420_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_40_fu_582_p4 <= ((ap_const_lv1_0 & out_exp_V_fu_574_p3) & significand_V_fu_566_p3);
    p_Result_4_fu_390_p5 <= (tmp_61_fu_382_p3 & out_bits_V_q0(14 downto 0));
    p_Result_s_fu_372_p2 <= (tmp_96_fu_366_p2 and tmp_95_fu_360_p2);
    phitmp1_fu_556_p4 <= ap_phi_mux_p_Val2_9_in_phi_fu_224_p4(61 downto 10);
    r_V_36_fu_503_p3 <= 
        r_V_fu_491_p2 when (isNeg_fu_465_p3(0) = '1') else 
        r_V_8_fu_497_p2;
    r_V_8_fu_497_p2 <= std_logic_vector(shift_left(unsigned(p_s_reg_188),to_integer(unsigned('0' & tmp_66_fu_487_p1(31-1 downto 0)))));
    r_V_fu_491_p2 <= std_logic_vector(shift_right(signed(p_s_reg_188),to_integer(unsigned('0' & tmp_66_fu_487_p1(31-1 downto 0)))));
    result_write_assign_fu_592_p1 <= p_Result_40_fu_582_p4;
    shift_2_fu_458_p2 <= std_logic_vector(unsigned(c_q0) + unsigned(shift_reg_198));
    significand_V_fu_566_p3 <= 
        ap_const_lv52_0 when (or_cond_fu_546_p2(0) = '1') else 
        phitmp1_fu_556_p4;
    tmp_101_fu_533_p3 <= newexp_fu_527_p2(31 downto 31);
    tmp_102_fu_552_p1 <= newexp_fu_527_p2(11 - 1 downto 0);
    tmp_61_fu_382_p3 <= (tmp_98_fu_378_p1 & ap_const_lv1_1);
    tmp_62_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_177),64));
    tmp_64_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_210),64));
    tmp_65_fu_473_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(c_q0));
    tmp_66_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ush_fu_479_p3),63));
    tmp_67_fu_512_p2 <= "1" when (c_q0 = ap_const_lv32_10) else "0";
    tmp_68_fu_518_p2 <= std_logic_vector(unsigned(ap_const_lv12_3FF) - unsigned(prescale));
    tmp_69_fu_541_p2 <= "1" when (in_V = ap_const_lv63_0) else "0";
        tmp_82_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_68_fu_518_p2),32));

    tmp_82_fu_258_p1 <= in_V(15 - 1 downto 0);
    tmp_83_fu_261_p3 <= (tmp_82_fu_258_p1 & ap_const_lv17_10000);
    tmp_84_fu_290_p2 <= "1" when (unsigned(Lo_assign_fu_284_p2) > unsigned(Hi_assign_fu_278_p2)) else "0";
    
    tmp_85_fu_296_p4_proc : process(in_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(63+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(63+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(63 - 1 downto 0);
    variable tmp_85_fu_296_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(63 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(63 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(63 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3E(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := in_V;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(63-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(63-1-unsigned(ap_const_lv32_3E(6-1 downto 0)));
            for tmp_85_fu_296_p4_i in 0 to 63-1 loop
                v0_cpy(tmp_85_fu_296_p4_i) := in_V(63-1-tmp_85_fu_296_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(63-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_85_fu_296_p4 <= resvalue(63-1 downto 0);
    end process;

    tmp_86_fu_305_p2 <= std_logic_vector(unsigned(Lo_assign_fu_284_p2) - unsigned(Hi_assign_fu_278_p2));
    tmp_87_fu_311_p2 <= std_logic_vector(signed(ap_const_lv6_3E) - signed(Lo_assign_fu_284_p2));
    tmp_88_fu_317_p2 <= std_logic_vector(unsigned(Hi_assign_fu_278_p2) - unsigned(Lo_assign_fu_284_p2));
    tmp_89_fu_323_p3 <= 
        tmp_86_fu_305_p2 when (tmp_84_fu_290_p2(0) = '1') else 
        tmp_88_fu_317_p2;
    tmp_90_fu_331_p3 <= 
        tmp_85_fu_296_p4 when (tmp_84_fu_290_p2(0) = '1') else 
        in_V;
    tmp_91_fu_338_p3 <= 
        tmp_87_fu_311_p2 when (tmp_84_fu_290_p2(0) = '1') else 
        Lo_assign_fu_284_p2;
    tmp_92_fu_346_p2 <= std_logic_vector(signed(ap_const_lv6_3E) - signed(tmp_89_fu_323_p3));
    tmp_93_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_338_p3),63));
    tmp_94_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_346_p2),63));
    tmp_95_fu_360_p2 <= std_logic_vector(shift_right(unsigned(tmp_90_fu_331_p3),to_integer(unsigned('0' & tmp_93_fu_352_p1(31-1 downto 0)))));
    tmp_96_fu_366_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv63_7FFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_94_fu_356_p1(31-1 downto 0)))));
    tmp_98_fu_378_p1 <= p_Result_s_fu_372_p2(16 - 1 downto 0);
    tmp_99_fu_439_p3 <= i2_reg_210(2 downto 2);
    tmp_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_165),64));
    tmp_s_fu_270_p3 <= (i_reg_165 & ap_const_lv4_0);
    ush_fu_479_p3 <= 
        tmp_65_fu_473_p2 when (isNeg_fu_465_p3(0) = '1') else 
        c_q0;
end behav;
