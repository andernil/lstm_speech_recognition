// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_FFT_data_1201 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        from_FFT_2_dout,
        from_FFT_2_empty_n,
        from_FFT_2_read,
        from_FFT_din,
        from_FFT_full_n,
        from_FFT_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] from_FFT_2_dout;
input   from_FFT_2_empty_n;
output   from_FFT_2_read;
output  [63:0] from_FFT_din;
input   from_FFT_full_n;
output   from_FFT_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg from_FFT_2_read;
reg from_FFT_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    from_FFT_2_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_59_p2;
reg    from_FFT_blk_n;
wire   [10:0] i_8_fu_65_p2;
reg    ap_block_state2;
reg   [10:0] i_reg_48;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((exitcond_fu_59_p2 == 1'd0) & (from_FFT_full_n == 1'b0)) | ((exitcond_fu_59_p2 == 1'd0) & (from_FFT_2_empty_n == 1'b0))) & (exitcond_fu_59_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_59_p2 == 1'd0) & (from_FFT_full_n == 1'b0)) | ((exitcond_fu_59_p2 == 1'd0) & (from_FFT_2_empty_n == 1'b0))) & (exitcond_fu_59_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_48 <= i_8_fu_65_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_48 <= 11'd0;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_59_p2 == 1'd0) & (from_FFT_full_n == 1'b0)) | ((exitcond_fu_59_p2 == 1'd0) & (from_FFT_2_empty_n == 1'b0))) & (exitcond_fu_59_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_59_p2 == 1'd0) & (from_FFT_full_n == 1'b0)) | ((exitcond_fu_59_p2 == 1'd0) & (from_FFT_2_empty_n == 1'b0))) & (exitcond_fu_59_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_59_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        from_FFT_2_blk_n = from_FFT_2_empty_n;
    end else begin
        from_FFT_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_59_p2 == 1'd0) & (from_FFT_full_n == 1'b0)) | ((exitcond_fu_59_p2 == 1'd0) & (from_FFT_2_empty_n == 1'b0))) & (exitcond_fu_59_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        from_FFT_2_read = 1'b1;
    end else begin
        from_FFT_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_59_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        from_FFT_blk_n = from_FFT_full_n;
    end else begin
        from_FFT_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_59_p2 == 1'd0) & (from_FFT_full_n == 1'b0)) | ((exitcond_fu_59_p2 == 1'd0) & (from_FFT_2_empty_n == 1'b0))) & (exitcond_fu_59_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        from_FFT_write = 1'b1;
    end else begin
        from_FFT_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((exitcond_fu_59_p2 == 1'd0) & (from_FFT_full_n == 1'b0)) | ((exitcond_fu_59_p2 == 1'd0) & (from_FFT_2_empty_n == 1'b0))) & (exitcond_fu_59_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((exitcond_fu_59_p2 == 1'd0) & (from_FFT_full_n == 1'b0)) | ((exitcond_fu_59_p2 == 1'd0) & (from_FFT_2_empty_n == 1'b0))) & (exitcond_fu_59_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((exitcond_fu_59_p2 == 1'd0) & (from_FFT_full_n == 1'b0)) | ((exitcond_fu_59_p2 == 1'd0) & (from_FFT_2_empty_n == 1'b0)));
end

assign exitcond_fu_59_p2 = ((i_reg_48 == 11'd1024) ? 1'b1 : 1'b0);

assign from_FFT_din = from_FFT_2_dout;

assign i_8_fu_65_p2 = (i_reg_48 + 11'd1);

endmodule //read_FFT_data_1201
