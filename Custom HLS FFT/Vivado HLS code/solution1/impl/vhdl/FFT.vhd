-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT is
port (
    to_FFT_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    to_FFT_empty_n : IN STD_LOGIC;
    to_FFT_read : OUT STD_LOGIC;
    from_FFT_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    from_FFT_full_n : IN STD_LOGIC;
    from_FFT_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of FFT is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";

    signal write_FFT_data_1200_U0_ap_start : STD_LOGIC;
    signal write_FFT_data_1200_U0_start_full_n : STD_LOGIC;
    signal write_FFT_data_1200_U0_ap_done : STD_LOGIC;
    signal write_FFT_data_1200_U0_ap_continue : STD_LOGIC;
    signal write_FFT_data_1200_U0_ap_idle : STD_LOGIC;
    signal write_FFT_data_1200_U0_ap_ready : STD_LOGIC;
    signal write_FFT_data_1200_U0_start_out : STD_LOGIC;
    signal write_FFT_data_1200_U0_start_write : STD_LOGIC;
    signal write_FFT_data_1200_U0_fft_config_data_V_read : STD_LOGIC;
    signal write_FFT_data_1200_U0_fft_config_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal write_FFT_data_1200_U0_fft_config_data_V_write : STD_LOGIC;
    signal write_FFT_data_1200_U0_to_FFT_2_din : STD_LOGIC_VECTOR (63 downto 0);
    signal write_FFT_data_1200_U0_to_FFT_2_write : STD_LOGIC;
    signal write_FFT_data_1200_U0_to_FFT_read : STD_LOGIC;
    signal fft_FFT_params_U0_ap_start : STD_LOGIC;
    signal fft_FFT_params_U0_ap_done : STD_LOGIC;
    signal fft_FFT_params_U0_ap_idle : STD_LOGIC;
    signal fft_FFT_params_U0_ap_ready : STD_LOGIC;
    signal fft_FFT_params_U0_ap_continue : STD_LOGIC;
    signal fft_FFT_params_U0_xn_read : STD_LOGIC;
    signal fft_FFT_params_U0_xk_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_FFT_params_U0_xk_write : STD_LOGIC;
    signal fft_FFT_params_U0_status_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal fft_FFT_params_U0_status_data_V_write : STD_LOGIC;
    signal fft_FFT_params_U0_config_ch_data_V_read : STD_LOGIC;
    signal read_FFT_data_1201_U0_ap_start : STD_LOGIC;
    signal read_FFT_data_1201_U0_ap_done : STD_LOGIC;
    signal read_FFT_data_1201_U0_ap_continue : STD_LOGIC;
    signal read_FFT_data_1201_U0_ap_idle : STD_LOGIC;
    signal read_FFT_data_1201_U0_ap_ready : STD_LOGIC;
    signal read_FFT_data_1201_U0_from_FFT_2_read : STD_LOGIC;
    signal read_FFT_data_1201_U0_from_FFT_din : STD_LOGIC_VECTOR (63 downto 0);
    signal read_FFT_data_1201_U0_from_FFT_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal FFT_config_data_V_full_n : STD_LOGIC;
    signal FFT_config_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal FFT_config_data_V_empty_n : STD_LOGIC;
    signal fft_FFT_params_U0_config_ch_data_V_full_n : STD_LOGIC;
    signal fft_FFT_params_U0_config_ch_data_V_write : STD_LOGIC;
    signal fft_FFT_params_U0_config_ch_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal x_in_channel_full_n : STD_LOGIC;
    signal x_in_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal x_in_channel_empty_n : STD_LOGIC;
    signal x_out_channel_full_n : STD_LOGIC;
    signal x_out_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal x_out_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_fft_FFT_params_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_FFT_params_U0_full_n : STD_LOGIC;
    signal start_for_fft_FFT_params_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_FFT_params_U0_empty_n : STD_LOGIC;
    signal start_for_read_FFT_data_1201_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_read_FFT_data_1201_U0_full_n : STD_LOGIC;
    signal start_for_read_FFT_data_1201_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_read_FFT_data_1201_U0_empty_n : STD_LOGIC;
    signal fft_FFT_params_U0_start_full_n : STD_LOGIC;
    signal fft_FFT_params_U0_start_write : STD_LOGIC;
    signal read_FFT_data_1201_U0_start_full_n : STD_LOGIC;
    signal read_FFT_data_1201_U0_start_write : STD_LOGIC;

    component write_FFT_data_1200 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fft_config_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        fft_config_data_V_empty_n : IN STD_LOGIC;
        fft_config_data_V_read : OUT STD_LOGIC;
        fft_config_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        fft_config_data_V_full_n : IN STD_LOGIC;
        fft_config_data_V_write : OUT STD_LOGIC;
        to_FFT_2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        to_FFT_2_full_n : IN STD_LOGIC;
        to_FFT_2_write : OUT STD_LOGIC;
        to_FFT_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        to_FFT_empty_n : IN STD_LOGIC;
        to_FFT_read : OUT STD_LOGIC );
    end component;


    component fft_FFT_params_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        xn_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        xn_empty_n : IN STD_LOGIC;
        xn_read : OUT STD_LOGIC;
        xk_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        xk_full_n : IN STD_LOGIC;
        xk_write : OUT STD_LOGIC;
        status_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        status_data_V_full_n : IN STD_LOGIC;
        status_data_V_write : OUT STD_LOGIC;
        config_ch_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        config_ch_data_V_empty_n : IN STD_LOGIC;
        config_ch_data_V_read : OUT STD_LOGIC );
    end component;


    component read_FFT_data_1201 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        from_FFT_2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        from_FFT_2_empty_n : IN STD_LOGIC;
        from_FFT_2_read : OUT STD_LOGIC;
        from_FFT_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        from_FFT_full_n : IN STD_LOGIC;
        from_FFT_write : OUT STD_LOGIC );
    end component;


    component fifo_w24_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_fft_FFT_params_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_read_FFT_data_1201_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    write_FFT_data_1200_U0 : component write_FFT_data_1200
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_FFT_data_1200_U0_ap_start,
        start_full_n => write_FFT_data_1200_U0_start_full_n,
        ap_done => write_FFT_data_1200_U0_ap_done,
        ap_continue => write_FFT_data_1200_U0_ap_continue,
        ap_idle => write_FFT_data_1200_U0_ap_idle,
        ap_ready => write_FFT_data_1200_U0_ap_ready,
        start_out => write_FFT_data_1200_U0_start_out,
        start_write => write_FFT_data_1200_U0_start_write,
        fft_config_data_V_dout => FFT_config_data_V_dout,
        fft_config_data_V_empty_n => FFT_config_data_V_empty_n,
        fft_config_data_V_read => write_FFT_data_1200_U0_fft_config_data_V_read,
        fft_config_data_V_din => write_FFT_data_1200_U0_fft_config_data_V_din,
        fft_config_data_V_full_n => ap_const_logic_1,
        fft_config_data_V_write => write_FFT_data_1200_U0_fft_config_data_V_write,
        to_FFT_2_din => write_FFT_data_1200_U0_to_FFT_2_din,
        to_FFT_2_full_n => x_in_channel_full_n,
        to_FFT_2_write => write_FFT_data_1200_U0_to_FFT_2_write,
        to_FFT_dout => to_FFT_dout,
        to_FFT_empty_n => to_FFT_empty_n,
        to_FFT_read => write_FFT_data_1200_U0_to_FFT_read);

    fft_FFT_params_U0 : component fft_FFT_params_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_FFT_params_U0_ap_start,
        ap_ce => ap_const_logic_1,
        ap_done => fft_FFT_params_U0_ap_done,
        ap_idle => fft_FFT_params_U0_ap_idle,
        ap_ready => fft_FFT_params_U0_ap_ready,
        ap_continue => fft_FFT_params_U0_ap_continue,
        xn_dout => x_in_channel_dout,
        xn_empty_n => x_in_channel_empty_n,
        xn_read => fft_FFT_params_U0_xn_read,
        xk_din => fft_FFT_params_U0_xk_din,
        xk_full_n => x_out_channel_full_n,
        xk_write => fft_FFT_params_U0_xk_write,
        status_data_V_din => fft_FFT_params_U0_status_data_V_din,
        status_data_V_full_n => ap_const_logic_1,
        status_data_V_write => fft_FFT_params_U0_status_data_V_write,
        config_ch_data_V_dout => ap_const_lv24_0,
        config_ch_data_V_empty_n => ap_const_logic_1,
        config_ch_data_V_read => fft_FFT_params_U0_config_ch_data_V_read);

    read_FFT_data_1201_U0 : component read_FFT_data_1201
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_FFT_data_1201_U0_ap_start,
        ap_done => read_FFT_data_1201_U0_ap_done,
        ap_continue => read_FFT_data_1201_U0_ap_continue,
        ap_idle => read_FFT_data_1201_U0_ap_idle,
        ap_ready => read_FFT_data_1201_U0_ap_ready,
        from_FFT_2_dout => x_out_channel_dout,
        from_FFT_2_empty_n => x_out_channel_empty_n,
        from_FFT_2_read => read_FFT_data_1201_U0_from_FFT_2_read,
        from_FFT_din => read_FFT_data_1201_U0_from_FFT_din,
        from_FFT_full_n => from_FFT_full_n,
        from_FFT_write => read_FFT_data_1201_U0_from_FFT_write);

    FFT_config_data_V_U : component fifo_w24_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_FFT_params_U0_config_ch_data_V_din,
        if_full_n => FFT_config_data_V_full_n,
        if_write => fft_FFT_params_U0_config_ch_data_V_write,
        if_dout => FFT_config_data_V_dout,
        if_empty_n => FFT_config_data_V_empty_n,
        if_read => write_FFT_data_1200_U0_fft_config_data_V_read);

    x_in_channel_U : component fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => write_FFT_data_1200_U0_to_FFT_2_din,
        if_full_n => x_in_channel_full_n,
        if_write => write_FFT_data_1200_U0_to_FFT_2_write,
        if_dout => x_in_channel_dout,
        if_empty_n => x_in_channel_empty_n,
        if_read => fft_FFT_params_U0_xn_read);

    x_out_channel_U : component fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_FFT_params_U0_xk_din,
        if_full_n => x_out_channel_full_n,
        if_write => fft_FFT_params_U0_xk_write,
        if_dout => x_out_channel_dout,
        if_empty_n => x_out_channel_empty_n,
        if_read => read_FFT_data_1201_U0_from_FFT_2_read);

    start_for_fft_FFT_params_U0_U : component start_for_fft_FFT_params_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_FFT_params_U0_din,
        if_full_n => start_for_fft_FFT_params_U0_full_n,
        if_write => write_FFT_data_1200_U0_start_write,
        if_dout => start_for_fft_FFT_params_U0_dout,
        if_empty_n => start_for_fft_FFT_params_U0_empty_n,
        if_read => fft_FFT_params_U0_ap_ready);

    start_for_read_FFT_data_1201_U0_U : component start_for_read_FFT_data_1201_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_read_FFT_data_1201_U0_din,
        if_full_n => start_for_read_FFT_data_1201_U0_full_n,
        if_write => write_FFT_data_1200_U0_start_write,
        if_dout => start_for_read_FFT_data_1201_U0_dout,
        if_empty_n => start_for_read_FFT_data_1201_U0_empty_n,
        if_read => read_FFT_data_1201_U0_ap_ready);




    ap_done <= read_FFT_data_1201_U0_ap_done;
    ap_idle <= (write_FFT_data_1200_U0_ap_idle and read_FFT_data_1201_U0_ap_idle and fft_FFT_params_U0_ap_idle);
    ap_ready <= write_FFT_data_1200_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= read_FFT_data_1201_U0_ap_done;
    ap_sync_ready <= write_FFT_data_1200_U0_ap_ready;
    fft_FFT_params_U0_ap_continue <= ap_const_logic_1;
    fft_FFT_params_U0_ap_start <= start_for_fft_FFT_params_U0_empty_n;
    fft_FFT_params_U0_config_ch_data_V_din <= ap_const_lv24_0;
    fft_FFT_params_U0_config_ch_data_V_full_n <= FFT_config_data_V_full_n;
    fft_FFT_params_U0_config_ch_data_V_write <= ap_const_logic_0;
    fft_FFT_params_U0_start_full_n <= ap_const_logic_1;
    fft_FFT_params_U0_start_write <= ap_const_logic_0;
    from_FFT_din <= read_FFT_data_1201_U0_from_FFT_din;
    from_FFT_write <= read_FFT_data_1201_U0_from_FFT_write;
    read_FFT_data_1201_U0_ap_continue <= ap_continue;
    read_FFT_data_1201_U0_ap_start <= start_for_read_FFT_data_1201_U0_empty_n;
    read_FFT_data_1201_U0_start_full_n <= ap_const_logic_1;
    read_FFT_data_1201_U0_start_write <= ap_const_logic_0;
    start_for_fft_FFT_params_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_read_FFT_data_1201_U0_din <= (0=>ap_const_logic_1, others=>'-');
    to_FFT_read <= write_FFT_data_1200_U0_to_FFT_read;
    write_FFT_data_1200_U0_ap_continue <= ap_const_logic_1;
    write_FFT_data_1200_U0_ap_start <= ap_start;
    write_FFT_data_1200_U0_start_full_n <= (start_for_read_FFT_data_1201_U0_full_n and start_for_fft_FFT_params_U0_full_n);
end behav;
