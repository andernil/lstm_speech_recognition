-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity window_FFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_data_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_data_M_real_ce0 : OUT STD_LOGIC;
    input_data_M_real_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_data_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_data_M_imag_ce0 : OUT STD_LOGIC;
    input_data_M_imag_we0 : OUT STD_LOGIC;
    input_data_M_imag_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    input_data_M_imag_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_data_M_imag_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_data_M_imag_ce1 : OUT STD_LOGIC;
    input_data_M_imag_we1 : OUT STD_LOGIC;
    input_data_M_imag_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    input_data_M_imag_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_data_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_data_ce0 : OUT STD_LOGIC;
    output_data_we0 : OUT STD_LOGIC;
    output_data_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    peak_value : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of window_FFT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "window_FFT,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=2533749,HLS_SYN_TPT=none,HLS_SYN_MEM=37,HLS_SYN_DSP=106,HLS_SYN_FF=22885,HLS_SYN_LUT=27301,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (92 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (92 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (92 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (92 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (92 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (92 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (92 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (92 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (92 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (92 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (92 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (92 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv64_3FE147AE147AE148 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100001010001111010111000010100011110101110000101001000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv64_401921FB54411744 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000011001001000011111101101010100010000010001011101000100";
    constant ap_const_lv64_3FDD70A3D70A3D71 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111011101011100001010001111010111000010100011110101110001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv64_408FF80000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000010001111111110000000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv7_76 : STD_LOGIC_VECTOR (6 downto 0) := "1110110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_FE1 : STD_LOGIC_VECTOR (11 downto 0) := "111111100001";
    constant ap_const_lv12_1F : STD_LOGIC_VECTOR (11 downto 0) := "000000011111";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv65_3FF : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000001111111111";
    constant ap_const_lv65_7FE : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000011111111110";
    constant ap_const_lv65_1FFFFFFFFFFFFFC01 : STD_LOGIC_VECTOR (64 downto 0) := "11111111111111111111111111111111111111111111111111111110000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv62_3FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (61 downto 0) := "11111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv66_3FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (65 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv66_0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_256_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_256_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_256_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fourth_order_double_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_4_ce0 : STD_LOGIC;
    signal fourth_order_double_4_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_5_ce0 : STD_LOGIC;
    signal fourth_order_double_5_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_6_ce0 : STD_LOGIC;
    signal fourth_order_double_6_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_7_ce0 : STD_LOGIC;
    signal fourth_order_double_7_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_s_ce0 : STD_LOGIC;
    signal fourth_order_double_s_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_587_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_602 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal tmp_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal scaling_reg_2331 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_cast_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_2_fu_627_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_2344 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_2349 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_593_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_2354 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal p_Result_s_reg_2359 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_V_8_fu_644_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_8_reg_2364 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_9_fu_654_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_9_reg_2371 : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_2377 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_693_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_reg_2388 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_75_i_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_i_reg_2403 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_33_reg_2409 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_86_i_i_reg_2415 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_34_fu_774_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_34_reg_2420 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal Mx_V_reg_2426 : STD_LOGIC_VECTOR (62 downto 0);
    signal Ex_V_fu_868_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_2433 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_reg_2439 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_i_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_i_reg_2445 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_i_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_i_reg_2451 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_933_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_2458 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal B_V_fu_964_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_2465 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_9_fu_978_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_9_reg_2470 : STD_LOGIC_VECTOR (97 downto 0);
    signal B_squared_V_reg_2475 : STD_LOGIC_VECTOR (48 downto 0);
    signal B_third_power_V_reg_2506 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal p_Val2_16_reg_2511 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_77_i_i_reg_2516 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_79_i_i_reg_2521 : STD_LOGIC_VECTOR (47 downto 0);
    signal fourth_order_double_14_reg_2526 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_17_reg_2531 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_fu_1191_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_reg_2536 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal result_V_reg_2541 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ret_V_2_fu_1237_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_2_reg_2546 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Repl2_3_fu_1391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_3_reg_2551 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_576_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_576_ap_done : STD_LOGIC;
    signal ret_V_9_fu_1410_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_9_reg_2556 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_10_fu_1432_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_10_reg_2561 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_i_i_i_fu_1447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_582_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_2571 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal frame_1_fu_1463_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal frame_1_reg_2579 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal tmp_6_fu_1469_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_reg_2584 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_1457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1487_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_reg_2592 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal tmp_s_fu_1493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_2597 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_1481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_M_real_l_reg_2612 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal hamming_window_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal hamming_window_load_reg_2617 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_fu_1514_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_4_reg_2625 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal exitcond4_fu_1508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel3_fu_1813_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel3_reg_2635 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal tmp_12_fu_1829_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_2640 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grp_FFT_fu_568_ap_ready : STD_LOGIC;
    signal grp_FFT_fu_568_ap_done : STD_LOGIC;
    signal ap_sync_grp_FFT_fu_568_ap_ready : STD_LOGIC;
    signal ap_sync_grp_FFT_fu_568_ap_done : STD_LOGIC;
    signal ap_block_state89_on_subcall_done : BOOLEAN;
    signal j_1_fu_1847_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_2648 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal from_FFT_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal from_FFT_empty_n : STD_LOGIC;
    signal from_FFT_read : STD_LOGIC;
    signal exitcond5_fu_1841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state90 : BOOLEAN;
    signal tmp_65_fu_1853_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_65_reg_2653 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_38_reg_2658 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_58_fu_1867_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_58_reg_2663 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_1968_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_21_reg_2668 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal tmp_22_fu_1982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_2674 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_36_fu_1988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_36_reg_2679 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_12_fu_1999_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_V_12_reg_2685 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal tmp_32_fu_2075_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_2690 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_fu_2081_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_71_reg_2697 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_81_fu_2085_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_81_reg_2702 : STD_LOGIC_VECTOR (10 downto 0);
    signal data_frame_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_frame_ce0 : STD_LOGIC;
    signal data_frame_we0 : STD_LOGIC;
    signal data_frame_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal hamming_window_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal hamming_window_ce0 : STD_LOGIC;
    signal hamming_window_we0 : STD_LOGIC;
    signal grp_FFT_fu_568_to_FFT_read : STD_LOGIC;
    signal grp_FFT_fu_568_from_FFT_din : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_FFT_fu_568_from_FFT_write : STD_LOGIC;
    signal grp_FFT_fu_568_ap_start : STD_LOGIC;
    signal grp_FFT_fu_568_ap_idle : STD_LOGIC;
    signal grp_FFT_fu_568_ap_continue : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_576_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_576_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_576_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_511 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal frame_reg_523 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_535 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal i2_reg_546 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal to_FFT_din : STD_LOGIC_VECTOR (63 downto 0);
    signal to_FFT_full_n : STD_LOGIC;
    signal to_FFT_write : STD_LOGIC;
    signal j_reg_557 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal grp_FFT_fu_568_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_FFT_fu_568_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_FFT_fu_568_ap_done : STD_LOGIC := '0';
    signal to_FFT_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal to_FFT_empty_n : STD_LOGIC;
    signal to_FFT_read : STD_LOGIC;
    signal from_FFT_full_n : STD_LOGIC;
    signal from_FFT_write : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_576_ap_start_reg : STD_LOGIC := '0';
    signal tmp_i2_i_i_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_i_i_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_1452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_1520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_2322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_587_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_fu_593_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_599_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal expv_op_i_fu_664_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_V_fu_670_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_i_fu_678_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_72_i_i_i_fu_704_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_22_fu_707_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal ret_V_11_fu_713_p4 : STD_LOGIC_VECTOR (169 downto 0);
    signal p_Result_27_fu_697_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_731_p0 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_731_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_731_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal tmp_i_i_fu_762_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_780_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_784_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_7_fu_789_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_i3_i_i_fu_796_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Result_28_fu_806_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_10_fu_814_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_29_fu_824_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_i_i_fu_832_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Mx_zeros_V_fu_840_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_89_i_i_fu_844_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal r_V_23_fu_848_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal storemerge_i_i_fu_767_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_92_i_i_fu_864_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_i_cast_i_fu_892_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_94_i_i_fu_895_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_901_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_4_i_cast_i_fu_908_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_i_i_fu_912_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_6_fu_916_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_7_fu_921_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_24_fu_926_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal B_trunc_V_fu_968_p4 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_25_fu_982_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_25_fu_982_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_25_fu_982_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal p_Result_i_i_fu_954_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_30_fu_998_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_26_fu_1018_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_26_fu_1018_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_11_fu_1015_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_26_fu_1018_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_27_fu_1033_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_27_fu_1033_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_27_fu_1033_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_28_fu_1056_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_28_fu_1056_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_28_fu_1056_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal r_V_29_fu_1079_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_29_fu_1079_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_29_fu_1079_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal B_fourth_power_V_fu_1039_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_31_fu_1103_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_31_fu_1103_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_31_fu_1103_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_30_fu_1132_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_30_fu_1132_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_30_fu_1132_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal tmp_2_fu_1138_p4 : STD_LOGIC_VECTOR (36 downto 0);
    signal t1_V_fu_1119_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal lhs_V_2_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_2_fu_1156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_i_i_fu_1148_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal rhs_V_3_i_cast_i_cas_fu_1162_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp31_fu_1171_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp31_cast_fu_1177_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal rhs_V_1_i_cast_i_cas_fu_1159_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp30_fu_1181_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp30_cast_fu_1187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp29_fu_1165_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Mx_V_read_assign_fu_1203_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_32_fu_1216_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_32_fu_1216_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_32_fu_1216_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal Ex_V_ret_i_fu_1197_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_3_fu_1233_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_24_fu_1244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_32_fu_1270_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_28_fu_1276_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1314_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_i_fu_1352_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_i_fu_1368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_i_fu_1363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_31_fu_1248_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_i_demorg_fu_1381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_11_trunc_fu_1373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_i_fu_1385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_fu_1397_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_10_fu_1256_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal not_or_cond_i3_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_i_cast_fu_1424_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_11_fu_1266_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_33_fu_1440_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_cast_fu_1477_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_fu_1498_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ireg_V_fu_1525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_1541_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_45_fu_1555_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_15_fu_1559_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_35_fu_1567_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_34_fu_1533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_1571_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_37_fu_1529_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_14_fu_1551_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_1591_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_54_fu_1597_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_fu_1607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1613_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_1619_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_1625_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_1577_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_61_fu_1653_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sh_amt_cast_fu_1633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_1669_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_34_fu_1673_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_63_fu_1683_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_1643_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_1585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_1637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_1705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_1717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_1723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_1729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_1647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_1741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_1753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp9_fu_1663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_1759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_1765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_1691_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_fu_1747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_1735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_1679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_1711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_1779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_1771_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_1785_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond1_fu_1793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_1807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_1799_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_1837_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_1872_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_33_fu_1890_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_1886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_33_fu_1890_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_1879_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_34_fu_1900_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_fu_1896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_34_fu_1900_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_33_fu_1890_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_34_fu_1900_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_fu_1910_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal lhs_V_fu_1906_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal ret_V_13_fu_1914_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_neg_fu_1928_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_39_fu_1934_p4 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_lshr_cast_fu_1944_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_41_fu_1954_p4 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_66_fu_1920_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_1948_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_lshr_f_cast_fu_1964_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_off_fu_1976_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_fu_1994_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_64_fu_2005_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_5_fu_2015_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_2019_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_2037_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_37_fu_2041_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_2049_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_2057_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_2027_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_2031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NZeros_fu_2061_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_2067_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_2092_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_2097_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_72_fu_2113_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_73_fu_2118_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_V_4_cast_fu_2089_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_74_fu_2122_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal p_Result_25_fu_2128_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal icmp1_fu_2107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_2134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_2146_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_2160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_2154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_2168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_2140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_2174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_2194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_2199_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_50_fu_2209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_2214_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_49_fu_2203_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_52_fu_2218_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_46_fu_2188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_2224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_fu_2228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_2180_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_2232_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_2240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_2244_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_4_fu_2250_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_80_fu_2264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_cast_cast_cas_fu_2272_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_fu_2280_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_2_trunc_fu_2285_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_5_fu_2260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_2291_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_38_fu_2298_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_2310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_731_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_731_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal r_V_28_fu_1056_p00 : STD_LOGIC_VECTOR (107 downto 0);
    signal r_V_29_fu_1079_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal r_V_30_fu_1132_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal r_V_30_fu_1132_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal r_V_31_fu_1103_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_31_fu_1103_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_32_fu_1216_p10 : STD_LOGIC_VECTOR (125 downto 0);

    component FFT IS
    port (
        to_FFT_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        to_FFT_empty_n : IN STD_LOGIC;
        to_FFT_read : OUT STD_LOGIC;
        from_FFT_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        from_FFT_full_n : IN STD_LOGIC;
        from_FFT_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (62 downto 0);
        prescale : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component window_FFT_dsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component window_FFT_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component window_FFT_ddiv_64ns_64ns_64_22_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component window_FFT_sitodp_32ns_64_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component window_FFT_mul_170ns_53ns_223_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (169 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component window_FFT_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component window_FFT_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component window_FFT_ref_4oPi_table_256_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component window_FFT_fourth_order_double_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component window_FFT_fourth_order_double_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component window_FFT_fourth_order_double_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component window_FFT_fourth_order_double_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component window_FFT_fourth_order_double_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component window_FFT_data_frame IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fifo_w64_d1024_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    ref_4oPi_table_256_V_U : component window_FFT_ref_4oPi_table_256_V
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_256_V_address0,
        ce0 => ref_4oPi_table_256_V_ce0,
        q0 => ref_4oPi_table_256_V_q0);

    fourth_order_double_4_U : component window_FFT_fourth_order_double_4
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_4_address0,
        ce0 => fourth_order_double_4_ce0,
        q0 => fourth_order_double_4_q0);

    fourth_order_double_5_U : component window_FFT_fourth_order_double_5
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_5_address0,
        ce0 => fourth_order_double_5_ce0,
        q0 => fourth_order_double_5_q0);

    fourth_order_double_6_U : component window_FFT_fourth_order_double_6
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_6_address0,
        ce0 => fourth_order_double_6_ce0,
        q0 => fourth_order_double_6_q0);

    fourth_order_double_7_U : component window_FFT_fourth_order_double_7
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_7_address0,
        ce0 => fourth_order_double_7_ce0,
        q0 => fourth_order_double_7_q0);

    fourth_order_double_s_U : component window_FFT_fourth_order_double_s
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_s_address0,
        ce0 => fourth_order_double_s_ce0,
        q0 => fourth_order_double_s_q0);

    data_frame_U : component window_FFT_data_frame
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_frame_address0,
        ce0 => data_frame_ce0,
        we0 => data_frame_we0,
        d0 => reg_602,
        q0 => data_frame_q0);

    hamming_window_U : component window_FFT_data_frame
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hamming_window_address0,
        ce0 => hamming_window_ce0,
        we0 => hamming_window_we0,
        d0 => grp_fu_593_p2,
        q0 => hamming_window_q0);

    grp_FFT_fu_568 : component FFT
    port map (
        to_FFT_dout => to_FFT_dout,
        to_FFT_empty_n => to_FFT_empty_n,
        to_FFT_read => grp_FFT_fu_568_to_FFT_read,
        from_FFT_din => grp_FFT_fu_568_from_FFT_din,
        from_FFT_full_n => from_FFT_full_n,
        from_FFT_write => grp_FFT_fu_568_from_FFT_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_FFT_fu_568_ap_start,
        ap_done => grp_FFT_fu_568_ap_done,
        ap_ready => grp_FFT_fu_568_ap_ready,
        ap_idle => grp_FFT_fu_568_ap_idle,
        ap_continue => grp_FFT_fu_568_ap_continue);

    grp_scaled_fixed2ieee_fu_576 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_fu_576_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_576_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_576_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_576_ap_ready,
        in_V => result_V_reg_2541,
        prescale => ret_V_2_reg_2546,
        ap_return => grp_scaled_fixed2ieee_fu_576_ap_return);

    window_FFT_dsub_64ns_64ns_64_5_full_dsp_1_U18 : component window_FFT_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FE147AE147AE148,
        din1 => reg_602,
        ce => ap_const_logic_1,
        dout => grp_fu_582_p2);

    window_FFT_dmul_64ns_64ns_64_5_max_dsp_1_U19 : component window_FFT_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_587_p0,
        din1 => grp_fu_587_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_587_p2);

    window_FFT_ddiv_64ns_64ns_64_22_1_U20 : component window_FFT_ddiv_64ns_64ns_64_22_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_593_p0,
        din1 => grp_fu_593_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_593_p2);

    window_FFT_sitodp_32ns_64_4_1_U21 : component window_FFT_sitodp_32ns_64_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_599_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_599_p1);

    window_FFT_mul_170ns_53ns_223_2_1_U22 : component window_FFT_mul_170ns_53ns_223_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 170,
        din1_WIDTH => 53,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_731_p0,
        din1 => grp_fu_731_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_731_p2);

    window_FFT_mux_83_1_1_1_U23 : component window_FFT_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_34_reg_2420,
        dout => sin_basis_fu_933_p10);

    window_FFT_mux_164_1_1_1_U24 : component window_FFT_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_32_fu_1270_p3,
        dout => tmp_28_fu_1276_p18);

    window_FFT_mux_164_1_1_1_U25 : component window_FFT_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_32_fu_1270_p3,
        dout => tmp_31_fu_1314_p18);

    from_FFT_fifo_U : component fifo_w64_d1024_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_FFT_fu_568_from_FFT_din,
        if_full_n => from_FFT_full_n,
        if_write => from_FFT_write,
        if_dout => from_FFT_dout,
        if_empty_n => from_FFT_empty_n,
        if_read => from_FFT_read);

    to_FFT_fifo_U : component fifo_w64_d1024_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => to_FFT_din,
        if_full_n => to_FFT_full_n,
        if_write => to_FFT_write,
        if_dout => to_FFT_dout,
        if_empty_n => to_FFT_empty_n,
        if_read => to_FFT_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_FFT_fu_568_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_FFT_fu_568_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state89_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                    ap_sync_reg_grp_FFT_fu_568_ap_done <= ap_const_logic_0;
                elsif ((grp_FFT_fu_568_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_FFT_fu_568_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_FFT_fu_568_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_FFT_fu_568_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state89_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                    ap_sync_reg_grp_FFT_fu_568_ap_ready <= ap_const_logic_0;
                elsif ((grp_FFT_fu_568_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_FFT_fu_568_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_FFT_fu_568_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_FFT_fu_568_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_FFT_fu_568_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state89)) or ((exitcond4_fu_1508_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state86)))) then 
                    grp_FFT_fu_568_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT_fu_568_ap_ready = ap_const_logic_1)) then 
                    grp_FFT_fu_568_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_scaled_fixed2ieee_fu_576_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scaled_fixed2ieee_fu_576_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    grp_scaled_fixed2ieee_fu_576_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scaled_fixed2ieee_fu_576_ap_ready = ap_const_logic_1)) then 
                    grp_scaled_fixed2ieee_fu_576_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    frame_reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                frame_reg_523 <= ap_const_lv7_0;
            elsif ((not(((from_FFT_empty_n = ap_const_logic_0) and (exitcond5_fu_1841_p2 = ap_const_lv1_0))) and (exitcond5_fu_1841_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                frame_reg_523 <= frame_1_reg_2579;
            end if; 
        end if;
    end process;

    i1_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_1457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                i1_reg_535 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                i1_reg_535 <= i_3_reg_2592;
            end if; 
        end if;
    end process;

    i2_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1481_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                i2_reg_546 <= ap_const_lv11_0;
            elsif (((to_FFT_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                i2_reg_546 <= i_4_reg_2625;
            end if; 
        end if;
    end process;

    i_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                i_reg_511 <= i_2_reg_2344;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_511 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                j_reg_557 <= j_1_reg_2648;
            elsif (((ap_const_boolean_0 = ap_block_state89_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                j_reg_557 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                B_V_reg_2465 <= B_V_fu_964_p1;
                B_squared_V_reg_2475 <= r_V_25_fu_982_p2(97 downto 49);
                    r_V_9_reg_2470(48 downto 0) <= r_V_9_fu_978_p1(48 downto 0);
                sin_basis_reg_2458 <= sin_basis_fu_933_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                B_third_power_V_reg_2506 <= r_V_26_fu_1018_p2(97 downto 56);
                fourth_order_double_14_reg_2526 <= fourth_order_double_7_q0;
                p_Val2_16_reg_2511 <= fourth_order_double_4_q0;
                tmp_17_reg_2531 <= r_V_31_fu_1103_p2(59 downto 31);
                tmp_77_i_i_reg_2516 <= r_V_28_fu_1056_p2(107 downto 52);
                tmp_79_i_i_reg_2521 <= r_V_29_fu_1079_p2(92 downto 45);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                Ex_V_reg_2433 <= Ex_V_fu_868_p2;
                Mx_V_reg_2426 <= r_V_23_fu_848_p2(123 downto 61);
                isNeg_reg_2439 <= Ex_V_fu_868_p2(10 downto 10);
                p_Val2_34_reg_2420 <= p_Val2_34_fu_774_p3;
                tmp_74_i_reg_2445 <= tmp_74_i_fu_882_p2;
                tmp_76_i_reg_2451 <= tmp_76_i_fu_887_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                closepath_reg_2377 <= closepath_fu_658_p2;
                p_Result_s_reg_2359 <= p_Val2_s_fu_633_p1(63 downto 63);
                tmp_23_reg_2388 <= tmp_23_fu_693_p1;
                tmp_V_8_reg_2364 <= p_Val2_s_fu_633_p1(62 downto 52);
                tmp_V_9_reg_2371 <= tmp_V_9_fu_654_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                frame_1_reg_2579 <= frame_1_fu_1463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                hamming_window_load_reg_2617 <= hamming_window_q0;
                input_data_M_real_l_reg_2612 <= input_data_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_2344 <= i_2_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                i_3_reg_2592 <= i_3_fu_1487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                i_4_reg_2625 <= i_4_fu_1514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((from_FFT_empty_n = ap_const_logic_0) and (exitcond5_fu_1841_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                j_1_reg_2648 <= j_1_fu_1847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                newSel3_reg_2635 <= newSel3_fu_1813_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_scaled_fixed2ieee_fu_576_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                p_Repl2_3_reg_2551 <= p_Repl2_3_fu_1391_p2;
                ret_V_10_reg_2561 <= ret_V_10_fu_1432_p3;
                ret_V_9_reg_2556 <= ret_V_9_fu_1410_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                p_Result_36_reg_2679 <= p_Result_36_fu_1988_p2;
                tmp_21_reg_2668 <= tmp_21_fu_1968_p3;
                tmp_22_reg_2674 <= tmp_22_fu_1982_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                p_Val2_33_reg_2409 <= grp_fu_731_p2(166 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_602 <= grp_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                result_V_reg_2541 <= r_V_32_fu_1216_p2(125 downto 63);
                ret_V_2_reg_2546 <= ret_V_2_fu_1237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                ret_V_reg_2536 <= ret_V_fu_1191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                scaling_reg_2331 <= grp_fu_599_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state89_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    tmp_12_reg_2640(15 downto 9) <= tmp_12_fu_1829_p3(15 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_reg_2674 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                tmp_32_reg_2690 <= tmp_32_fu_2075_p2;
                tmp_71_reg_2697 <= tmp_71_fu_2081_p1;
                tmp_81_reg_2702 <= tmp_81_fu_2085_p1;
                tmp_V_12_reg_2685 <= tmp_V_12_fu_1999_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((from_FFT_empty_n = ap_const_logic_0) and (exitcond5_fu_1841_p2 = ap_const_lv1_0))) and (exitcond5_fu_1841_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                tmp_38_reg_2658 <= from_FFT_dout(53 downto 32);
                tmp_58_reg_2663 <= tmp_58_fu_1867_p2;
                tmp_65_reg_2653 <= tmp_65_fu_1853_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                tmp_3_reg_2571 <= grp_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_1457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    tmp_6_reg_2584(13 downto 7) <= tmp_6_fu_1469_p3(13 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                tmp_75_i_reg_2403 <= tmp_75_i_fu_737_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_7_reg_2349 <= grp_fu_599_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_2377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                tmp_86_i_i_reg_2415 <= grp_fu_731_p2(169 downto 167);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    tmp_s_reg_2597(10 downto 0) <= tmp_s_fu_1493_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                x_assign_reg_2354 <= grp_fu_593_p2;
            end if;
        end if;
    end process;
    r_V_9_reg_2470(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    tmp_6_reg_2584(6 downto 0) <= "0000000";
    tmp_s_reg_2597(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    tmp_12_reg_2640(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state44, grp_scaled_fixed2ieee_fu_576_ap_done, ap_CS_fsm_state77, exitcond2_fu_1457_p2, ap_CS_fsm_state78, exitcond3_fu_1481_p2, ap_CS_fsm_state86, exitcond4_fu_1508_p2, ap_CS_fsm_state89, ap_block_state89_on_subcall_done, ap_CS_fsm_state90, from_FFT_empty_n, exitcond5_fu_1841_p2, exitcond1_fu_621_p2, ap_CS_fsm_state88, to_FFT_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((grp_scaled_fixed2ieee_fu_576_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state77 => 
                if (((exitcond2_fu_1457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state78 => 
                if (((exitcond3_fu_1481_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state86 => 
                if (((exitcond4_fu_1508_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((to_FFT_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                if (((ap_const_boolean_0 = ap_block_state89_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                if ((not(((from_FFT_empty_n = ap_const_logic_0) and (exitcond5_fu_1841_p2 = ap_const_lv1_0))) and (exitcond5_fu_1841_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                elsif ((not(((from_FFT_empty_n = ap_const_logic_0) and (exitcond5_fu_1841_p2 = ap_const_lv1_0))) and (exitcond5_fu_1841_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    B_V_fu_964_p1 <= r_V_24_fu_926_p3(56 - 1 downto 0);
    B_fourth_power_V_fu_1039_p4 <= r_V_27_fu_1033_p2(97 downto 63);
    B_trunc_V_fu_968_p4 <= r_V_24_fu_926_p3(55 downto 7);
    Ex_V_fu_868_p2 <= std_logic_vector(unsigned(storemerge_i_i_fu_767_p3) - unsigned(tmp_92_i_i_fu_864_p1));
    Ex_V_ret_i_fu_1197_p3 <= 
        Ex_V_reg_2433 when (sin_basis_reg_2458(0) = '1') else 
        ap_const_lv11_0;
    F2_fu_1591_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_14_fu_1551_p1));
    Mx_V_read_assign_fu_1203_p3 <= 
        Mx_V_reg_2426 when (sin_basis_reg_2458(0) = '1') else 
        ap_const_lv63_7FFFFFFFFFFFFFFF;
    Mx_bits_V_1_fu_784_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_33_reg_2409));
    Mx_zeros_V_fu_840_p1 <= tmp_i5_i_i_fu_832_p3(6 - 1 downto 0);
    NZeros_fu_2061_p2 <= std_logic_vector(unsigned(tmp_69_fu_2057_p1) + unsigned(tmp_67_fu_2027_p1));
    a_fu_2140_p2 <= (tmp_40_fu_2134_p2 and icmp1_fu_2107_p2);
    addr_V_fu_670_p3 <= 
        ap_const_lv11_4A when (closepath_fu_658_p2(0) = '1') else 
        expv_op_i_fu_664_p2;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);

    ap_block_state89_on_subcall_done_assign_proc : process(ap_sync_grp_FFT_fu_568_ap_ready, ap_sync_grp_FFT_fu_568_ap_done)
    begin
                ap_block_state89_on_subcall_done <= ((ap_sync_grp_FFT_fu_568_ap_ready and ap_sync_grp_FFT_fu_568_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state90_assign_proc : process(from_FFT_empty_n, exitcond5_fu_1841_p2)
    begin
                ap_block_state90 <= ((from_FFT_empty_n = ap_const_logic_0) and (exitcond5_fu_1841_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state77, exitcond2_fu_1457_p2)
    begin
        if (((exitcond2_fu_1457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state77, exitcond2_fu_1457_p2)
    begin
        if (((exitcond2_fu_1457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_FFT_fu_568_ap_done <= (grp_FFT_fu_568_ap_done or ap_sync_reg_grp_FFT_fu_568_ap_done);
    ap_sync_grp_FFT_fu_568_ap_ready <= (grp_FFT_fu_568_ap_ready or ap_sync_reg_grp_FFT_fu_568_ap_ready);
    closepath_fu_658_p2 <= "1" when (unsigned(tmp_V_8_fu_644_p4) < unsigned(ap_const_lv11_3FE)) else "0";

    data_frame_address0_assign_proc : process(tmp_s_reg_2597, ap_CS_fsm_state86, ap_CS_fsm_state85, tmp_13_fu_1520_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            data_frame_address0 <= tmp_13_fu_1520_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            data_frame_address0 <= tmp_s_reg_2597(10 - 1 downto 0);
        else 
            data_frame_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_frame_ce0_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            data_frame_ce0 <= ap_const_logic_1;
        else 
            data_frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_frame_we0_assign_proc : process(ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            data_frame_we0 <= ap_const_logic_1;
        else 
            data_frame_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_621_p2 <= "1" when (i_reg_511 = ap_const_lv11_400) else "0";
    exitcond2_fu_1457_p2 <= "1" when (frame_reg_523 = ap_const_lv7_76) else "0";
    exitcond3_fu_1481_p2 <= "1" when (i1_reg_535 = ap_const_lv11_400) else "0";
    exitcond4_fu_1508_p2 <= "1" when (i2_reg_546 = ap_const_lv11_400) else "0";
    exitcond5_fu_1841_p2 <= "1" when (j_reg_557 = ap_const_lv10_200) else "0";
    exp_tmp_V_fu_1541_p4 <= ireg_V_fu_1525_p1(62 downto 52);
    expv_op_i_fu_664_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(tmp_V_8_fu_644_p4));
    fourth_order_double_4_address0 <= tmp_98_i_i_fu_1006_p1(8 - 1 downto 0);

    fourth_order_double_4_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            fourth_order_double_4_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_5_address0 <= tmp_98_i_i_fu_1006_p1(8 - 1 downto 0);

    fourth_order_double_5_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            fourth_order_double_5_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_6_address0 <= tmp_98_i_i_fu_1006_p1(8 - 1 downto 0);

    fourth_order_double_6_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            fourth_order_double_6_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_7_address0 <= tmp_98_i_i_fu_1006_p1(8 - 1 downto 0);

    fourth_order_double_7_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            fourth_order_double_7_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_s_address0 <= tmp_98_i_i_fu_1006_p1(8 - 1 downto 0);

    fourth_order_double_s_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            fourth_order_double_s_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_1_fu_1463_p2 <= std_logic_vector(unsigned(frame_reg_523) + unsigned(ap_const_lv7_1));

    from_FFT_read_assign_proc : process(ap_CS_fsm_state90, from_FFT_empty_n, exitcond5_fu_1841_p2)
    begin
        if ((not(((from_FFT_empty_n = ap_const_logic_0) and (exitcond5_fu_1841_p2 = ap_const_lv1_0))) and (exitcond5_fu_1841_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
            from_FFT_read <= ap_const_logic_1;
        else 
            from_FFT_read <= ap_const_logic_0;
        end if; 
    end process;


    from_FFT_write_assign_proc : process(ap_CS_fsm_state89, grp_FFT_fu_568_from_FFT_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            from_FFT_write <= grp_FFT_fu_568_from_FFT_write;
        else 
            from_FFT_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_FFT_fu_568_ap_continue_assign_proc : process(ap_CS_fsm_state89, ap_block_state89_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state89_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            grp_FFT_fu_568_ap_continue <= ap_const_logic_1;
        else 
            grp_FFT_fu_568_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_FFT_fu_568_ap_start <= grp_FFT_fu_568_ap_start_reg;

    grp_fu_587_p0_assign_proc : process(tmp_7_reg_2349, ret_i_i_i_fu_1447_p1, ap_CS_fsm_state45, input_data_M_real_l_reg_2612, ap_CS_fsm_state9, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_fu_587_p0 <= input_data_M_real_l_reg_2612;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_587_p0 <= ret_i_i_i_fu_1447_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_587_p0 <= tmp_7_reg_2349;
        else 
            grp_fu_587_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_587_p1_assign_proc : process(ap_CS_fsm_state45, hamming_window_load_reg_2617, ap_CS_fsm_state9, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_fu_587_p1 <= hamming_window_load_reg_2617;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_587_p1 <= ap_const_lv64_3FDD70A3D70A3D71;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_587_p1 <= ap_const_lv64_401921FB54411744;
        else 
            grp_fu_587_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_593_p0_assign_proc : process(reg_602, tmp_3_reg_2571, ap_CS_fsm_state14, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_593_p0 <= tmp_3_reg_2571;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_593_p0 <= reg_602;
        else 
            grp_fu_593_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_593_p1_assign_proc : process(scaling_reg_2331, ap_CS_fsm_state14, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_593_p1 <= scaling_reg_2331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_593_p1 <= ap_const_lv64_408FF80000000000;
        else 
            grp_fu_593_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_599_p0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_609_p2, i_cast_fu_616_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_599_p0 <= i_cast_fu_616_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_599_p0 <= tmp_fu_609_p2;
        else 
            grp_fu_599_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_731_p0 <= grp_fu_731_p00(170 - 1 downto 0);
    grp_fu_731_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_11_fu_713_p4),223));
    grp_fu_731_p1 <= grp_fu_731_p10(53 - 1 downto 0);
    grp_fu_731_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_27_fu_697_p3),223));
    grp_scaled_fixed2ieee_fu_576_ap_start <= grp_scaled_fixed2ieee_fu_576_ap_start_reg;

    hamming_window_address0_assign_proc : process(ap_CS_fsm_state78, tmp_s_fu_1493_p1, ap_CS_fsm_state76, tmp_5_fu_1452_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            hamming_window_address0 <= tmp_s_fu_1493_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            hamming_window_address0 <= tmp_5_fu_1452_p1(10 - 1 downto 0);
        else 
            hamming_window_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    hamming_window_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            hamming_window_ce0 <= ap_const_logic_1;
        else 
            hamming_window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hamming_window_we0_assign_proc : process(ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            hamming_window_we0 <= ap_const_logic_1;
        else 
            hamming_window_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i1_cast_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_535),14));
    i_2_fu_627_p2 <= std_logic_vector(unsigned(i_reg_511) + unsigned(ap_const_lv11_1));
    i_3_fu_1487_p2 <= std_logic_vector(unsigned(i1_reg_535) + unsigned(ap_const_lv11_1));
    i_4_fu_1514_p2 <= std_logic_vector(unsigned(i2_reg_546) + unsigned(ap_const_lv11_1));
    i_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_511),32));
    icmp1_fu_2107_p2 <= "1" when (signed(tmp_70_fu_2097_p4) > signed(ap_const_lv31_0)) else "0";
    icmp9_fu_1663_p2 <= "1" when (tmp_61_fu_1653_p4 = ap_const_lv7_0) else "0";
    icmp_fu_1607_p2 <= "1" when (signed(tmp_54_fu_1597_p4) > signed(ap_const_lv7_0)) else "0";
    input_data_M_imag_address0 <= ap_const_lv14_0;
    input_data_M_imag_address1 <= ap_const_lv14_0;
    input_data_M_imag_ce0 <= ap_const_logic_0;
    input_data_M_imag_ce1 <= ap_const_logic_0;
    input_data_M_imag_d0 <= ap_const_lv64_0;
    input_data_M_imag_d1 <= ap_const_lv64_0;
    input_data_M_imag_we0 <= ap_const_logic_0;
    input_data_M_imag_we1 <= ap_const_logic_0;
    input_data_M_real_address0 <= tmp_10_fu_1503_p1(14 - 1 downto 0);

    input_data_M_real_ce0_assign_proc : process(ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            input_data_M_real_ce0 <= ap_const_logic_1;
        else 
            input_data_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_1525_p1 <= data_frame_q0;
    j_1_fu_1847_p2 <= std_logic_vector(unsigned(j_reg_557) + unsigned(ap_const_lv10_1));
    j_cast_fu_1837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_557),16));
    l_fu_2067_p3 <= 
        NZeros_fu_2061_p2 when (tmp_26_fu_2031_p2(0) = '1') else 
        tmp_67_fu_2027_p1;
        lhs_V_2_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_fu_1119_p3),64));

        lhs_V_fu_1906_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_33_fu_1890_p2),65));

    lsb_index_fu_2092_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(tmp_32_reg_2690));
    m_1_fu_2244_p2 <= std_logic_vector(unsigned(m_fu_2232_p3) + unsigned(tmp_53_fu_2240_p1));
    m_4_fu_2250_p4 <= m_1_fu_2244_p2(63 downto 1);
    m_5_fu_2260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_4_fu_2250_p4),64));
    m_fu_2232_p3 <= 
        tmp_77_fu_2224_p1 when (tmp_46_fu_2188_p2(0) = '1') else 
        tmp_78_fu_2228_p1;
    man_V_1_fu_1571_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_35_fu_1567_p1));
    man_V_2_fu_1577_p3 <= 
        man_V_1_fu_1571_p2 when (p_Result_34_fu_1533_p3(0) = '1') else 
        p_Result_35_fu_1567_p1;
    newSel1_fu_1785_p3 <= 
        tmp_62_fu_1679_p1 when (sel_tmp8_fu_1735_p2(0) = '1') else 
        tmp_60_fu_1643_p1;
    newSel2_fu_1799_p3 <= 
        newSel_fu_1771_p3 when (or_cond_fu_1779_p2(0) = '1') else 
        newSel1_fu_1785_p3;
    newSel3_fu_1813_p3 <= 
        newSel2_fu_1799_p3 when (or_cond2_fu_1807_p2(0) = '1') else 
        ap_const_lv32_0;
    newSel_fu_1771_p3 <= 
        tmp_36_fu_1699_p2 when (sel_tmp5_fu_1765_p2(0) = '1') else 
        tmp_35_fu_1691_p3;
    not_or_cond_i3_fu_1418_p2 <= (or_cond_i_fu_1359_p2 xor ap_const_lv1_1);
    not_or_cond_i_demorg_fu_1381_p2 <= (tmp_75_i_reg_2403 and tmp_74_i_reg_2445);
    not_or_cond_i_fu_1385_p2 <= (not_or_cond_i_demorg_fu_1381_p2 xor ap_const_lv1_1);
    not_tmp_i_fu_1363_p2 <= (tmp_76_i_reg_2451 xor ap_const_lv1_1);
    or_cond1_fu_1793_p2 <= (sel_tmp8_fu_1735_p2 or sel_tmp2_fu_1711_p2);
    or_cond2_fu_1807_p2 <= (or_cond_fu_1779_p2 or or_cond1_fu_1793_p2);
    or_cond_fu_1779_p2 <= (sel_tmp5_fu_1765_p2 or sel_tmp3_fu_1747_p2);
    or_cond_i_fu_1359_p2 <= (tmp_75_i_reg_2403 and tmp_74_i_reg_2445);
    output_data_address0 <= tmp_59_fu_2322_p1(16 - 1 downto 0);

    output_data_ce0_assign_proc : process(ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            output_data_ce0 <= ap_const_logic_1;
        else 
            output_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_data_d0 <= 
        tmp_57_fu_2310_p1 when (tmp_22_reg_2674(0) = '1') else 
        ap_const_lv64_0;

    output_data_we0_assign_proc : process(ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            output_data_we0 <= ap_const_logic_1;
        else 
            output_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Repl2_11_trunc_fu_1373_p3 <= 
        not_tmp_i_fu_1363_p2 when (tmp_77_i_fu_1368_p2(0) = '1') else 
        p_Result_31_fu_1248_p3;
    p_Repl2_2_trunc_fu_2285_p2 <= std_logic_vector(unsigned(tmp_66_cast_cast_cas_fu_2272_p3) + unsigned(tmp_55_fu_2280_p2));
    p_Repl2_3_fu_1391_p2 <= (p_Repl2_11_trunc_fu_1373_p3 and not_or_cond_i_fu_1385_p2);
    
    p_Result_10_fu_814_p4_proc : process(p_Result_28_fu_806_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_10_fu_814_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_28_fu_806_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_10_fu_814_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_10_fu_814_p4_i) := p_Result_28_fu_806_p3(62-1-p_Result_10_fu_814_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_10_fu_814_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_1_i_cast_fu_1424_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (not_or_cond_i3_fu_1418_p2(0) = '1') else 
        ap_const_lv52_0;
    p_Result_25_fu_2128_p2 <= (tmp_V_4_cast_fu_2089_p1 and tmp_74_fu_2122_p2);
    p_Result_27_fu_697_p3 <= (ap_const_lv1_1 & tmp_V_9_reg_2371);
    p_Result_28_fu_806_p3 <= (p_Result_i3_i_i_fu_796_p4 & ap_const_lv1_1);
    p_Result_29_fu_824_p3 <= (ap_const_lv2_3 & p_Result_10_fu_814_p4);
    p_Result_30_fu_998_p3 <= (sin_basis_fu_933_p10 & p_Result_i_i_fu_954_p4);
    p_Result_31_fu_1248_p3 <= p_Val2_24_fu_1244_p1(63 downto 63);
    p_Result_32_fu_1270_p3 <= (p_Result_s_reg_2359 & p_Val2_34_reg_2420);
    p_Result_33_fu_1440_p4 <= ((p_Repl2_3_reg_2551 & ret_V_9_reg_2556) & ret_V_10_reg_2561);
    p_Result_34_fu_1533_p3 <= ireg_V_fu_1525_p1(63 downto 63);
    p_Result_35_fu_1567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1559_p3),54));
    p_Result_36_fu_1988_p2 <= "1" when (signed(ret_V_13_fu_1914_p2) < signed(ap_const_lv65_1FFFFFFFFFFFFFC01)) else "0";
    p_Result_37_fu_2041_p3 <= (tmp_68_fu_2037_p1 & ap_const_lv62_3FFFFFFFFFFFFFFF);
    p_Result_38_fu_2298_p5 <= (tmp_56_fu_2291_p3 & m_5_fu_2260_p1(51 downto 0));
    p_Result_3_fu_2160_p3 <= tmp_V_4_cast_fu_2089_p1(to_integer(unsigned(lsb_index_fu_2092_p2)) downto to_integer(unsigned(lsb_index_fu_2092_p2))) when (to_integer(unsigned(lsb_index_fu_2092_p2))>= 0 and to_integer(unsigned(lsb_index_fu_2092_p2))<=65) else "-";
        p_Result_5_fu_2015_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_64_fu_2005_p4),64));

    p_Result_i3_i_i_fu_796_p4 <= p_Val2_7_fu_789_p3(123 downto 63);
    p_Result_i_fu_1397_p3 <= 
        ap_const_lv11_3FF when (or_cond_i_fu_1359_p2(0) = '1') else 
        ap_const_lv11_7FF;
    p_Result_i_i_fu_954_p4 <= r_V_24_fu_926_p3(62 downto 56);
    p_Result_i_i_i_fu_678_p4 <= addr_V_fu_670_p3(10 downto 7);
    p_Val2_24_fu_1244_p1 <= grp_scaled_fixed2ieee_fu_576_ap_return;
    p_Val2_34_fu_774_p3 <= 
        ap_const_lv3_0 when (closepath_reg_2377(0) = '1') else 
        tmp_86_i_i_reg_2415;
    p_Val2_7_fu_789_p3 <= 
        Mx_bits_V_1_fu_784_p2 when (tmp_25_fu_780_p1(0) = '1') else 
        p_Val2_33_reg_2409;
    p_Val2_s_fu_633_p1 <= x_assign_reg_2354;
    p_lshr_cast_fu_1944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_1934_p4),56));
    p_lshr_f_cast_fu_1964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_1954_p4),56));
    p_neg_fu_1928_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(ret_V_13_fu_1914_p2));
    p_neg_t_fu_1948_p2 <= std_logic_vector(unsigned(ap_const_lv56_0) - unsigned(p_lshr_cast_fu_1944_p1));
    p_off_fu_1976_p2 <= (ret_V_13_fu_1914_p2 or ap_const_lv65_3FF);
    r_V_11_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_2475),98));
    r_V_1_fu_1879_p3 <= (tmp_38_reg_2658 & ap_const_lv10_0);
    r_V_22_fu_707_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_256_V_q0),to_integer(unsigned('0' & tmp_72_i_i_i_fu_704_p1(31-1 downto 0)))));
    r_V_23_fu_848_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_7_fu_789_p3),to_integer(unsigned('0' & tmp_89_i_i_fu_844_p1(31-1 downto 0)))));
    r_V_24_fu_926_p3 <= 
        r_V_6_fu_916_p2 when (isNeg_reg_2439(0) = '1') else 
        r_V_7_fu_921_p2;
    r_V_25_fu_982_p0 <= r_V_9_fu_978_p1(49 - 1 downto 0);
    r_V_25_fu_982_p1 <= r_V_9_fu_978_p1(49 - 1 downto 0);
    r_V_25_fu_982_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_25_fu_982_p0) * unsigned(r_V_25_fu_982_p1), 98));
    r_V_26_fu_1018_p0 <= r_V_9_reg_2470(49 - 1 downto 0);
    r_V_26_fu_1018_p1 <= r_V_11_fu_1015_p1(49 - 1 downto 0);
    r_V_26_fu_1018_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_26_fu_1018_p0) * unsigned(r_V_26_fu_1018_p1), 98));
    r_V_27_fu_1033_p0 <= r_V_11_fu_1015_p1(49 - 1 downto 0);
    r_V_27_fu_1033_p1 <= r_V_11_fu_1015_p1(49 - 1 downto 0);
    r_V_27_fu_1033_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_27_fu_1033_p0) * unsigned(r_V_27_fu_1033_p1), 98));
    r_V_28_fu_1056_p0 <= r_V_28_fu_1056_p00(56 - 1 downto 0);
    r_V_28_fu_1056_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_reg_2465),108));
    r_V_28_fu_1056_p1 <= fourth_order_double_5_q0;
    r_V_28_fu_1056_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_28_fu_1056_p0) * signed(r_V_28_fu_1056_p1))), 108));
    r_V_29_fu_1079_p0 <= r_V_29_fu_1079_p00(49 - 1 downto 0);
    r_V_29_fu_1079_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_2475),93));
    r_V_29_fu_1079_p1 <= fourth_order_double_6_q0;
    r_V_29_fu_1079_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_29_fu_1079_p0) * signed(r_V_29_fu_1079_p1))), 93));
        r_V_2_fu_1886_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_1872_p3),64));

    r_V_30_fu_1132_p0 <= r_V_30_fu_1132_p00(42 - 1 downto 0);
    r_V_30_fu_1132_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_third_power_V_reg_2506),75));
    r_V_30_fu_1132_p1 <= r_V_30_fu_1132_p10(33 - 1 downto 0);
    r_V_30_fu_1132_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_14_reg_2526),75));
    r_V_30_fu_1132_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_30_fu_1132_p0) * unsigned(r_V_30_fu_1132_p1), 75));
    r_V_31_fu_1103_p0 <= r_V_31_fu_1103_p00(35 - 1 downto 0);
    r_V_31_fu_1103_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_fourth_power_V_fu_1039_p4),60));
    r_V_31_fu_1103_p1 <= r_V_31_fu_1103_p10(25 - 1 downto 0);
    r_V_31_fu_1103_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_s_q0),60));
    r_V_31_fu_1103_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_31_fu_1103_p0) * unsigned(r_V_31_fu_1103_p1), 60));
    r_V_32_fu_1216_p0 <= ret_V_reg_2536;
    r_V_32_fu_1216_p1 <= r_V_32_fu_1216_p10(63 - 1 downto 0);
    r_V_32_fu_1216_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_read_assign_fu_1203_p3),126));
    r_V_32_fu_1216_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_32_fu_1216_p0) * signed('0' &r_V_32_fu_1216_p1))), 126));
    r_V_33_fu_1890_p0 <= r_V_2_fu_1886_p1(32 - 1 downto 0);
    r_V_33_fu_1890_p1 <= r_V_2_fu_1886_p1(32 - 1 downto 0);
    r_V_33_fu_1890_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_33_fu_1890_p0) * signed(r_V_33_fu_1890_p1))), 64));
    r_V_34_fu_1900_p0 <= r_V_4_fu_1896_p1(32 - 1 downto 0);
    r_V_34_fu_1900_p1 <= r_V_4_fu_1896_p1(32 - 1 downto 0);
    r_V_34_fu_1900_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_34_fu_1900_p0) * signed(r_V_34_fu_1900_p1))), 64));
        r_V_4_fu_1896_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_1879_p3),64));

    r_V_6_fu_916_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_2426),to_integer(unsigned('0' & tmp_95_i_i_fu_912_p1(31-1 downto 0)))));
    r_V_7_fu_921_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_2426),to_integer(unsigned('0' & tmp_95_i_i_fu_912_p1(31-1 downto 0)))));
    r_V_9_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_V_fu_968_p4),98));
    r_V_fu_1872_p3 <= (tmp_65_reg_2653 & ap_const_lv10_0);
    ref_4oPi_table_256_V_address0 <= tmp_i2_i_i_fu_688_p1(4 - 1 downto 0);

    ref_4oPi_table_256_V_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_10_fu_1432_p3 <= 
        p_Result_1_i_cast_fu_1424_p3 when (tmp_33_fu_1405_p2(0) = '1') else 
        tmp_V_11_fu_1266_p1;
    ret_V_11_fu_713_p4 <= r_V_22_fu_707_p2(255 downto 86);
    ret_V_13_fu_1914_p2 <= std_logic_vector(signed(rhs_V_fu_1910_p1) + signed(lhs_V_fu_1906_p1));
    ret_V_2_fu_1237_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(rhs_V_3_fu_1233_p1));
    ret_V_9_fu_1410_p3 <= 
        p_Result_i_fu_1397_p3 when (tmp_33_fu_1405_p2(0) = '1') else 
        tmp_V_10_fu_1256_p4;
    ret_V_fu_1191_p2 <= std_logic_vector(signed(tmp30_cast_fu_1187_p1) + signed(tmp29_fu_1165_p2));
    ret_i_i_i_fu_1447_p1 <= p_Result_33_fu_1440_p4;
    rev_fu_2154_p2 <= (tmp_76_fu_2146_p3 xor ap_const_lv1_1);
        rhs_V_1_i_cast_i_cas_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_79_i_i_reg_2521),49));

        rhs_V_2_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_77_i_i_reg_2516),64));

        rhs_V_3_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_ret_i_fu_1197_p3),12));

    rhs_V_3_i_cast_i_cas_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_2531),38));
        rhs_V_fu_1910_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_34_fu_1900_p2),65));

    sel_tmp1_fu_1705_p2 <= (tmp_16_fu_1585_p2 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_1753_p2 <= (sel_tmp6_demorgan_fu_1717_p2 or icmp_fu_1607_p2);
    sel_tmp2_fu_1711_p2 <= (tmp_20_fu_1637_p2 and sel_tmp1_fu_1705_p2);
    sel_tmp3_fu_1747_p2 <= (sel_tmp_fu_1741_p2 and sel_tmp7_fu_1729_p2);
    sel_tmp4_fu_1759_p2 <= (sel_tmp21_demorgan_fu_1753_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_1765_p2 <= (sel_tmp4_fu_1759_p2 and icmp9_fu_1663_p2);
    sel_tmp6_demorgan_fu_1717_p2 <= (tmp_20_fu_1637_p2 or tmp_16_fu_1585_p2);
    sel_tmp6_fu_1723_p2 <= (sel_tmp6_demorgan_fu_1717_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_1729_p2 <= (sel_tmp6_fu_1723_p2 and icmp_fu_1607_p2);
    sel_tmp8_fu_1735_p2 <= (tmp_27_fu_1647_p2 and sel_tmp7_fu_1729_p2);
    sel_tmp_fu_1741_p2 <= (tmp_27_fu_1647_p2 xor ap_const_lv1_1);
        sh_amt_cast_fu_1633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_1625_p3),32));

    sh_amt_fu_1625_p3 <= 
        tmp_18_fu_1613_p2 when (icmp_fu_1607_p2(0) = '1') else 
        tmp_19_fu_1619_p2;
        sh_assign_4_i_cast_i_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_901_p3),32));

        sh_i_cast_i_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_reg_2433),12));

    storemerge_i_i_fu_767_p3 <= 
        tmp_i_i_fu_762_p2 when (closepath_reg_2377(0) = '1') else 
        ap_const_lv11_0;
    t1_V_fu_1119_p3 <= (p_Val2_16_reg_2511 & ap_const_lv4_0);
    tmp29_fu_1165_p2 <= std_logic_vector(signed(lhs_V_2_fu_1152_p1) + signed(rhs_V_2_fu_1156_p1));
        tmp30_cast_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp30_fu_1181_p2),64));

    tmp30_fu_1181_p2 <= std_logic_vector(unsigned(tmp31_cast_fu_1177_p1) + unsigned(rhs_V_1_i_cast_i_cas_fu_1159_p1));
    tmp31_cast_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp31_fu_1171_p2),49));
    tmp31_fu_1171_p2 <= std_logic_vector(unsigned(tmp_81_i_i_fu_1148_p1) + unsigned(rhs_V_3_i_cast_i_cas_fu_1162_p1));
    tmp_10_fu_1503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1498_p2),64));
    tmp_12_fu_1829_p3 <= (frame_reg_523 & ap_const_lv9_0);
    tmp_13_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_546),64));
    tmp_14_fu_1551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_1541_p4),12));
    tmp_15_fu_1559_p3 <= (ap_const_lv1_1 & tmp_45_fu_1555_p1);
    tmp_16_fu_1585_p2 <= "1" when (tmp_37_fu_1529_p1 = ap_const_lv63_0) else "0";
    tmp_18_fu_1613_p2 <= std_logic_vector(signed(ap_const_lv12_FE1) + signed(F2_fu_1591_p2));
    tmp_19_fu_1619_p2 <= std_logic_vector(unsigned(ap_const_lv12_1F) - unsigned(F2_fu_1591_p2));
    tmp_20_fu_1637_p2 <= "1" when (F2_fu_1591_p2 = ap_const_lv12_1F) else "0";
    tmp_21_fu_1968_p3 <= 
        p_neg_t_fu_1948_p2 when (tmp_66_fu_1920_p3(0) = '1') else 
        p_lshr_f_cast_fu_1964_p1;
    tmp_22_fu_1982_p2 <= "1" when (unsigned(p_off_fu_1976_p2) > unsigned(ap_const_lv65_7FE)) else "0";
    tmp_23_fu_693_p1 <= addr_V_fu_670_p3(7 - 1 downto 0);
    
    tmp_24_fu_2019_p3_proc : process(p_Result_5_fu_2015_p1)
    begin
        tmp_24_fu_2019_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_5_fu_2015_p1(i) = '1' then
                tmp_24_fu_2019_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_25_fu_780_p1 <= p_Val2_34_fu_774_p3(1 - 1 downto 0);
    tmp_26_fu_2031_p2 <= "1" when (tmp_64_fu_2005_p4 = ap_const_lv54_0) else "0";
    tmp_27_fu_1647_p2 <= "1" when (unsigned(sh_amt_fu_1625_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_29_fu_1669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_1633_p1),54));
    tmp_2_fu_1138_p4 <= r_V_30_fu_1132_p2(74 downto 38);
    
    tmp_30_fu_2049_p3_proc : process(p_Result_37_fu_2041_p3)
    begin
        tmp_30_fu_2049_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_37_fu_2041_p3(i) = '1' then
                tmp_30_fu_2049_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_32_fu_2075_p2 <= std_logic_vector(unsigned(ap_const_lv32_42) - unsigned(l_fu_2067_p3));
    tmp_33_fu_1405_p2 <= (tmp_76_i_reg_2451 or or_cond_i_fu_1359_p2);
    tmp_34_fu_1673_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_1577_p3),to_integer(unsigned('0' & tmp_29_fu_1669_p1(31-1 downto 0)))));
    tmp_35_fu_1691_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_63_fu_1683_p3(0) = '1') else 
        ap_const_lv32_0;
    tmp_36_fu_1699_p2 <= std_logic_vector(shift_left(unsigned(tmp_60_fu_1643_p1),to_integer(unsigned('0' & sh_amt_cast_fu_1633_p1(31-1 downto 0)))));
    tmp_37_fu_1529_p1 <= ireg_V_fu_1525_p1(63 - 1 downto 0);
    tmp_39_fu_1934_p4 <= p_neg_fu_1928_p2(64 downto 10);
    tmp_40_fu_2134_p2 <= "0" when (p_Result_25_fu_2128_p2 = ap_const_lv66_0) else "1";
    tmp_41_fu_1954_p4 <= ret_V_13_fu_1914_p2(64 downto 10);
    tmp_42_fu_2168_p2 <= (rev_fu_2154_p2 and p_Result_3_fu_2160_p3);
    tmp_43_fu_2174_p2 <= (tmp_42_fu_2168_p2 or a_fu_2140_p2);
    tmp_44_fu_2180_p3 <= (ap_const_lv31_0 & tmp_43_fu_2174_p2);
    tmp_45_fu_1555_p1 <= ireg_V_fu_1525_p1(52 - 1 downto 0);
    tmp_46_fu_2188_p2 <= "1" when (signed(lsb_index_fu_2092_p2) > signed(ap_const_lv32_0)) else "0";
    tmp_47_fu_2194_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(tmp_32_reg_2690));
    tmp_48_fu_2199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_2194_p2),66));
    tmp_49_fu_2203_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_4_cast_fu_2089_p1),to_integer(unsigned('0' & tmp_48_fu_2199_p1(31-1 downto 0)))));
    tmp_50_fu_2209_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(tmp_32_reg_2690));
    tmp_51_fu_2214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_2209_p2),66));
    tmp_52_fu_2218_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_4_cast_fu_2089_p1),to_integer(unsigned('0' & tmp_51_fu_2214_p1(31-1 downto 0)))));
    tmp_53_fu_2240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_2180_p3),64));
    tmp_54_fu_1597_p4 <= F2_fu_1591_p2(11 downto 5);
    tmp_55_fu_2280_p2 <= std_logic_vector(unsigned(ap_const_lv11_4) - unsigned(tmp_81_reg_2702));
    tmp_56_fu_2291_p3 <= (p_Result_36_reg_2679 & p_Repl2_2_trunc_fu_2285_p2);
    tmp_57_fu_2310_p1 <= p_Result_38_fu_2298_p5;
    tmp_58_fu_1867_p2 <= std_logic_vector(unsigned(tmp_12_reg_2640) + unsigned(j_cast_fu_1837_p1));
    tmp_59_fu_2322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_reg_2663),64));
    tmp_5_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_511),64));
    tmp_60_fu_1643_p1 <= man_V_2_fu_1577_p3(32 - 1 downto 0);
    tmp_61_fu_1653_p4 <= sh_amt_fu_1625_p3(11 downto 5);
    tmp_62_fu_1679_p1 <= tmp_34_fu_1673_p2(32 - 1 downto 0);
    tmp_63_fu_1683_p3 <= ireg_V_fu_1525_p1(63 downto 63);
    tmp_64_fu_2005_p4 <= tmp_V_12_fu_1999_p3(55 downto 2);
    tmp_65_fu_1853_p1 <= from_FFT_dout(22 - 1 downto 0);
    tmp_66_cast_cast_cas_fu_2272_p3 <= 
        ap_const_lv11_3FF when (tmp_80_fu_2264_p3(0) = '1') else 
        ap_const_lv11_3FE;
    tmp_66_fu_1920_p3 <= ret_V_13_fu_1914_p2(64 downto 64);
    tmp_67_fu_2027_p1 <= tmp_24_fu_2019_p3(32 - 1 downto 0);
    tmp_68_fu_2037_p1 <= tmp_V_12_fu_1999_p3(2 - 1 downto 0);
    tmp_69_fu_2057_p1 <= tmp_30_fu_2049_p3(32 - 1 downto 0);
    tmp_6_fu_1469_p3 <= (frame_reg_523 & ap_const_lv7_0);
    tmp_70_fu_2097_p4 <= lsb_index_fu_2092_p2(31 downto 1);
    tmp_71_fu_2081_p1 <= tmp_32_fu_2075_p2(7 - 1 downto 0);
    tmp_72_fu_2113_p2 <= std_logic_vector(signed(ap_const_lv7_78) - signed(tmp_71_reg_2697));
    tmp_72_i_i_i_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_2388),256));
    tmp_73_fu_2118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_2113_p2),66));
    tmp_73_i_fu_1352_p3 <= 
        tmp_28_fu_1276_p18 when (sin_basis_reg_2458(0) = '1') else 
        tmp_31_fu_1314_p18;
    tmp_74_fu_2122_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv66_3FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_73_fu_2118_p1(31-1 downto 0)))));
    tmp_74_i_fu_882_p2 <= "1" when (tmp_V_8_reg_2364 = ap_const_lv11_0) else "0";
    tmp_75_i_fu_737_p2 <= "1" when (tmp_V_9_reg_2371 = ap_const_lv52_0) else "0";
    tmp_76_fu_2146_p3 <= lsb_index_fu_2092_p2(31 downto 31);
    tmp_76_i_fu_887_p2 <= "1" when (tmp_V_8_reg_2364 = ap_const_lv11_7FF) else "0";
    tmp_77_fu_2224_p1 <= tmp_49_fu_2203_p2(64 - 1 downto 0);
    tmp_77_i_fu_1368_p2 <= (tmp_76_i_reg_2451 or tmp_73_i_fu_1352_p3);
    tmp_78_fu_2228_p1 <= tmp_52_fu_2218_p2(64 - 1 downto 0);
    tmp_80_fu_2264_p3 <= m_1_fu_2244_p2(54 downto 54);
    tmp_81_fu_2085_p1 <= l_fu_2067_p3(11 - 1 downto 0);
    tmp_81_i_i_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1138_p4),38));
    tmp_89_i_i_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_fu_840_p1),124));
    tmp_92_i_i_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_fu_840_p1),11));
    tmp_94_i_i_fu_895_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_i_cast_i_fu_892_p1));
    tmp_95_i_i_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_4_i_cast_i_fu_908_p1),63));
    tmp_98_i_i_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_30_fu_998_p3),64));
    tmp_9_fu_1498_p2 <= std_logic_vector(unsigned(tmp_6_reg_2584) + unsigned(i1_cast_fu_1477_p1));
    tmp_V_10_fu_1256_p4 <= p_Val2_24_fu_1244_p1(62 downto 52);
    tmp_V_11_fu_1266_p1 <= p_Val2_24_fu_1244_p1(52 - 1 downto 0);
    tmp_V_12_fu_1999_p3 <= 
        tmp_V_fu_1994_p2 when (p_Result_36_reg_2679(0) = '1') else 
        tmp_21_reg_2668;
        tmp_V_4_cast_fu_2089_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_12_reg_2685),66));

    tmp_V_8_fu_644_p4 <= p_Val2_s_fu_633_p1(62 downto 52);
    tmp_V_9_fu_654_p1 <= p_Val2_s_fu_633_p1(52 - 1 downto 0);
    tmp_V_fu_1994_p2 <= std_logic_vector(unsigned(ap_const_lv56_0) - unsigned(tmp_21_reg_2668));
    tmp_fu_609_p2 <= std_logic_vector(shift_left(unsigned(peak_value),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    tmp_i2_i_i_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_i_fu_678_p4),64));
    
    tmp_i5_i_i_fu_832_p3_proc : process(p_Result_29_fu_824_p3)
    begin
        tmp_i5_i_i_fu_832_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_29_fu_824_p3(i) = '1' then
                tmp_i5_i_i_fu_832_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_i_i_fu_762_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(tmp_V_8_reg_2364));
    tmp_s_fu_1493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_535),64));
    to_FFT_din <= (ap_const_lv32_0 & newSel3_reg_2635);

    to_FFT_read_assign_proc : process(ap_CS_fsm_state89, grp_FFT_fu_568_to_FFT_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            to_FFT_read <= grp_FFT_fu_568_to_FFT_read;
        else 
            to_FFT_read <= ap_const_logic_0;
        end if; 
    end process;


    to_FFT_write_assign_proc : process(ap_CS_fsm_state88, to_FFT_full_n)
    begin
        if (((to_FFT_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            to_FFT_write <= ap_const_logic_1;
        else 
            to_FFT_write <= ap_const_logic_0;
        end if; 
    end process;

    ush_fu_901_p3 <= 
        tmp_94_i_i_fu_895_p2 when (isNeg_reg_2439(0) = '1') else 
        sh_i_cast_i_fu_892_p1;
end behav;
