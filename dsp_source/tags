!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
FFT	hamming_original.cpp	/^void FFT(complex<double>* input_data, int num_samples)$/;"	f
MEL_HIGHEST_FREQUENCY	hamming_original.cpp	15;"	d	file:
MEL_LOWEST_FREQUENCY	hamming_original.cpp	14;"	d	file:
MEL_NUM_FILTERBANKS	hamming_original.cpp	16;"	d	file:
NUM_FRAMES	hamming_original.cpp	13;"	d	file:
NUM_SAMPLES	hamming_original.cpp	9;"	d	file:
NUM_SAMPLES_PER_FFT	hamming_original.cpp	10;"	d	file:
NUM_SAMPLES_PER_FFT_FRAME	hamming_original.cpp	12;"	d	file:
NUM_SAMPLES_PER_FFT_FRAME_STEP	hamming_original.cpp	11;"	d	file:
PI	hamming_original.cpp	8;"	d	file:
SAMPLING_FREQUENCY	hamming_original.cpp	17;"	d	file:
WAV_HEADER	hamming_original.cpp	/^typedef struct WAV_HEADER{$/;"	s	file:
audioFormat	hamming_original.cpp	/^    uint16_t audioFormat;$/;"	m	struct:WAV_HEADER	file:
bitsPerSample	hamming_original.cpp	/^    uint16_t bitsPerSample;$/;"	m	struct:WAV_HEADER	file:
blockAlign	hamming_original.cpp	/^    uint16_t blockAlign;$/;"	m	struct:WAV_HEADER	file:
byteRate	hamming_original.cpp	/^    uint32_t byteRate;$/;"	m	struct:WAV_HEADER	file:
calculate_filterbank_energies	hamming_original.cpp	/^double** calculate_filterbank_energies(double* input_data, double** filters, int num_filterbanks, int num_frames, int frame_size, int FFT_size)$/;"	f
chunkSize	hamming_original.cpp	/^    uint32_t chunkSize;$/;"	m	struct:WAV_HEADER	file:
fmt_header	hamming_original.cpp	/^    unsigned char fmt_header[4];$/;"	m	struct:WAV_HEADER	file:
freq_to_mel	hamming_original.cpp	/^double freq_to_mel(double freq){$/;"	f
generate_filterbank	hamming_original.cpp	/^void generate_filterbank(double* filterbank, double prev_filterbank, double curr_filterbank, double next_filterbank, int FFT_size){$/;"	f
init_mel	hamming_original.cpp	/^double** init_mel(double min_frequency, double max_frequency, int num_filterbanks, int FFT_size, int samplerate){$/;"	f
main	hamming_original.cpp	/^int main()$/;"	f
mel_to_freq	hamming_original.cpp	/^double mel_to_freq(double mel){$/;"	f
numChannels	hamming_original.cpp	/^    uint16_t numChannels;$/;"	m	struct:WAV_HEADER	file:
read_wav	hamming_original.cpp	/^int read_wav(complex<double>* data_array, const char* filename)$/;"	f
riff_header	hamming_original.cpp	/^    unsigned char riff_header[4];$/;"	m	struct:WAV_HEADER	file:
sampleRate	hamming_original.cpp	/^    uint32_t sampleRate;$/;"	m	struct:WAV_HEADER	file:
separate	hamming_original.cpp	/^void separate (complex<double>* input_data, int num_samples)$/;"	f
subchunk1Size	hamming_original.cpp	/^    uint32_t subchunk1Size;$/;"	m	struct:WAV_HEADER	file:
subchunk2Id	hamming_original.cpp	/^    unsigned char subchunk2Id[4];$/;"	m	struct:WAV_HEADER	file:
subchunk2Size	hamming_original.cpp	/^    uint32_t subchunk2Size;$/;"	m	struct:WAV_HEADER	file:
wav_hdr	hamming_original.cpp	/^} wav_hdr;$/;"	t	typeref:struct:WAV_HEADER	file:
wave_header	hamming_original.cpp	/^    unsigned char wave_header[4];$/;"	m	struct:WAV_HEADER	file:
window_FFT	hamming_original.cpp	/^double* window_FFT(complex<double>* input_data, int num_samples, int frame_size, int frame_step, int num_frames)$/;"	f
