// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dummy_proc_fe_HH_
#define _dummy_proc_fe_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dummy_proc_fe : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<1> > direction;
    sc_in< sc_logic > direction_ap_vld;
    sc_out< sc_logic > direction_ap_ack;
    sc_out< sc_lv<16> > config_data_V_din;
    sc_in< sc_logic > config_data_V_full_n;
    sc_out< sc_logic > config_data_V_write;
    sc_in< sc_lv<32> > in_r_dout;
    sc_in< sc_logic > in_r_empty_n;
    sc_out< sc_logic > in_r_read;
    sc_out< sc_lv<32> > out_r_din;
    sc_in< sc_logic > out_r_full_n;
    sc_out< sc_logic > out_r_write;


    // Module declarations
    dummy_proc_fe(sc_module_name name);
    SC_HAS_PROCESS(dummy_proc_fe);

    ~dummy_proc_fe();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > direction_blk_n;
    sc_signal< sc_logic > config_data_V_blk_n;
    sc_signal< sc_logic > in_r_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_135_p2;
    sc_signal< sc_logic > out_r_blk_n;
    sc_signal< sc_lv<11> > i_1_fu_141_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<11> > i_reg_103;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<11> > tmp_6_fu_114_p3;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<10> ap_const_lv10_2AB;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_config_data_V_blk_n();
    void thread_config_data_V_din();
    void thread_config_data_V_write();
    void thread_direction_ap_ack();
    void thread_direction_blk_n();
    void thread_exitcond_fu_135_p2();
    void thread_i_1_fu_141_p2();
    void thread_in_r_blk_n();
    void thread_in_r_read();
    void thread_internal_ap_ready();
    void thread_out_r_blk_n();
    void thread_out_r_din();
    void thread_out_r_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_6_fu_114_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
