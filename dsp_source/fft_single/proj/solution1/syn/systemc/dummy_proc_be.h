// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dummy_proc_be_HH_
#define _dummy_proc_be_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dummy_proc_be : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > status_in_data_V_dout;
    sc_in< sc_logic > status_in_data_V_empty_n;
    sc_out< sc_logic > status_in_data_V_read;
    sc_out< sc_logic > ovflo_din;
    sc_in< sc_logic > ovflo_full_n;
    sc_out< sc_logic > ovflo_write;
    sc_in< sc_lv<32> > in_r_dout;
    sc_in< sc_logic > in_r_empty_n;
    sc_out< sc_logic > in_r_read;
    sc_out< sc_lv<32> > out_r_din;
    sc_in< sc_logic > out_r_full_n;
    sc_out< sc_logic > out_r_write;


    // Module declarations
    dummy_proc_be(sc_module_name name);
    SC_HAS_PROCESS(dummy_proc_be);

    ~dummy_proc_be();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > status_in_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_106_p2;
    sc_signal< sc_logic > ovflo_blk_n;
    sc_signal< sc_logic > in_r_blk_n;
    sc_signal< sc_logic > out_r_blk_n;
    sc_signal< sc_lv<11> > i_2_fu_112_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<11> > i_reg_95;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond_fu_106_p2();
    void thread_i_2_fu_112_p2();
    void thread_in_r_blk_n();
    void thread_in_r_read();
    void thread_out_r_blk_n();
    void thread_out_r_din();
    void thread_out_r_write();
    void thread_ovflo_blk_n();
    void thread_ovflo_din();
    void thread_ovflo_write();
    void thread_status_in_data_V_blk_n();
    void thread_status_in_data_V_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
