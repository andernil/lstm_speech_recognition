-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_proc_fe is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    direction : IN STD_LOGIC_VECTOR (0 downto 0);
    direction_ap_vld : IN STD_LOGIC;
    direction_ap_ack : OUT STD_LOGIC;
    config_data_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    config_data_V_full_n : IN STD_LOGIC;
    config_data_V_write : OUT STD_LOGIC;
    in_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    out_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC );
end;


architecture behav of dummy_proc_fe is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2AB : STD_LOGIC_VECTOR (9 downto 0) := "1010101011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal direction_blk_n : STD_LOGIC;
    signal config_data_V_blk_n : STD_LOGIC;
    signal in_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n : STD_LOGIC;
    signal i_1_fu_141_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_reg_103 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_6_fu_114_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((exitcond_fu_135_p2 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0)) or ((exitcond_fu_135_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_135_p2 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0)) or ((exitcond_fu_135_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_103 <= i_1_fu_141_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (direction_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_103 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, direction_ap_vld, config_data_V_full_n, in_r_empty_n, out_r_full_n, ap_CS_fsm_state2, exitcond_fu_135_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (direction_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((exitcond_fu_135_p2 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0)) or ((exitcond_fu_135_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((exitcond_fu_135_p2 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0)) or ((exitcond_fu_135_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, direction_ap_vld, config_data_V_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (direction_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(in_r_empty_n, out_r_full_n, exitcond_fu_135_p2)
    begin
                ap_block_state2 <= (((exitcond_fu_135_p2 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0)) or ((exitcond_fu_135_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, in_r_empty_n, out_r_full_n, ap_CS_fsm_state2, exitcond_fu_135_p2)
    begin
        if ((not((((exitcond_fu_135_p2 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0)) or ((exitcond_fu_135_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    config_data_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_data_V_blk_n <= config_data_V_full_n;
        else 
            config_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    config_data_V_din <= (ap_const_lv16_0(15 downto 11) & tmp_6_fu_114_p3);

    config_data_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, direction_ap_vld, config_data_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (direction_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_data_V_write <= ap_const_logic_1;
        else 
            config_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    direction_ap_ack_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, direction_ap_vld, config_data_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (direction_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            direction_ap_ack <= ap_const_logic_1;
        else 
            direction_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    direction_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, direction_ap_vld)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            direction_blk_n <= direction_ap_vld;
        else 
            direction_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_fu_135_p2 <= "1" when (i_reg_103 = ap_const_lv11_400) else "0";
    i_1_fu_141_p2 <= std_logic_vector(unsigned(i_reg_103) + unsigned(ap_const_lv11_1));

    in_r_blk_n_assign_proc : process(in_r_empty_n, ap_CS_fsm_state2, exitcond_fu_135_p2)
    begin
        if (((exitcond_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_blk_n <= in_r_empty_n;
        else 
            in_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_read_assign_proc : process(in_r_empty_n, out_r_full_n, ap_CS_fsm_state2, exitcond_fu_135_p2)
    begin
        if ((not((((exitcond_fu_135_p2 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0)) or ((exitcond_fu_135_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_read <= ap_const_logic_1;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(in_r_empty_n, out_r_full_n, ap_CS_fsm_state2, exitcond_fu_135_p2)
    begin
        if ((not((((exitcond_fu_135_p2 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0)) or ((exitcond_fu_135_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    out_r_blk_n_assign_proc : process(out_r_full_n, ap_CS_fsm_state2, exitcond_fu_135_p2)
    begin
        if (((exitcond_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_r_blk_n <= out_r_full_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_din <= in_r_dout;

    out_r_write_assign_proc : process(in_r_empty_n, out_r_full_n, ap_CS_fsm_state2, exitcond_fu_135_p2)
    begin
        if ((not((((exitcond_fu_135_p2 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0)) or ((exitcond_fu_135_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (exitcond_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_r_write <= ap_const_logic_1;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_6_fu_114_p3 <= (ap_const_lv10_2AB & direction);
end behav;
